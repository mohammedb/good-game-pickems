This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-05T15:25:15.421Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.eslintrc.json
.github/workflows/pull-request.yaml
.gitignore
.husky/pre-commit
.lintstagedrc.js
.nvmrc
.prettierignore
.prettierrc.yaml
components.json
components/ui/accordion.tsx
components/ui/alert-dialog.tsx
components/ui/alert.tsx
components/ui/aspect-ratio.tsx
components/ui/avatar.tsx
components/ui/badge.tsx
components/ui/button.tsx
components/ui/calendar.tsx
jest.config.js
jest.polyfills.js
jest.setup.ts
LICENSE
next-env.d.ts
next.config.js
package.json
postcss.config.js
README.md
src/app/admin/page.tsx
src/app/api/admin/points/route.ts
src/app/api/admin/sync/route.ts
src/app/api/auth/callback/route.ts
src/app/api/cron/sync-matches/route.ts
src/app/api/cron/update-points/route.ts
src/app/api/matches/[round]/route.ts
src/app/api/message/route.ts
src/app/api/picks/route.ts
src/app/api/setup-admin/route.ts
src/app/globals.css
src/app/layout.tsx
src/app/leaderboard/page.tsx
src/app/login/page.tsx
src/app/matches/actions.ts
src/app/matches/MatchList.tsx
src/app/matches/page.tsx
src/app/matches/types.ts
src/app/opengraph-image.tsx
src/app/page.tsx
src/app/profile/page.tsx
src/app/test-examples/counter.test.tsx
src/app/test-examples/counter.tsx
src/app/test-examples/page.test.tsx
src/app/test-examples/page.tsx
src/components/auth/auth-actions.ts
src/components/AuthButton.tsx
src/components/Code.tsx
src/components/ConnectSupabaseSteps.tsx
src/components/DarkModeToggle.tsx
src/components/Header.tsx
src/components/Navigation.tsx
src/components/NextLogo.tsx
src/components/ReactQueryExample.test.tsx
src/components/ReactQueryExample.tsx
src/components/ShareButton.tsx
src/components/SignUpUserSteps.tsx
src/components/Step.tsx
src/components/SupabaseLogo.tsx
src/components/ThemeToggle.tsx
src/components/Toaster.tsx
src/components/ui/button.tsx
src/components/ui/card.tsx
src/components/ui/dropdown-menu.tsx
src/components/ui/label.tsx
src/components/ui/radio-group.tsx
src/components/ui/separator.tsx
src/components/ui/toast.tsx
src/components/ui/toaster.tsx
src/components/ui/use-toast.ts
src/db/functions/update_user_total_points.sql
src/db/migrations/leaderboard_function.sql
src/db/migrations/matches.sql
src/db/migrations/remove_is_synced.sql
src/db/schema.sql
src/db/triggers.sql
src/hooks/useGetMessage.ts
src/middleware.ts
src/mocks/browser.ts
src/mocks/handlers.ts
src/mocks/index.ts
src/mocks/server.ts
src/providers/ReactQueryProvider.tsx
src/providers/ThemeProvider.tsx
src/test/test-utils.tsx
src/utils/goodgame.ts
src/utils/supabase.ts
src/utils/tailwind.ts
tailwind.config.js
tsconfig.json

================================================================
Files
================================================================

================
File: .eslintrc.json
================
{
  "extends": "next/core-web-vitals"
}

================
File: .github/workflows/pull-request.yaml
================
name: Frontend Pull Request Workflow

on:
  pull_request:
    branches:
      - main

jobs:
  frontend-pull-request:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          package_json_file: package.json
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Install dependencies
        run: pnpm i

      - name: Run type check
        run: pnpm type-check

      - name: Check linting
        run: pnpm lint

      - name: Run format check
        run: pnpm format-check

      - name: Run tests
        run: pnpm test:ci

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo

# IDE
.vscode

# swc
.swc

================
File: .husky/pre-commit
================
#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

pnpm lint-staged

================
File: .lintstagedrc.js
================
const path = require('path')

const buildEslintCommand = (filenames) =>
  `next lint --fix --file ${filenames
    .map((f) => path.relative(process.cwd(), f))
    .join(' --file ')}`

module.exports = {
  '*.{js,jsx,ts,tsx}': [
    buildEslintCommand,
    'prettier --ignore-path .gitignore --write',
  ],
}

================
File: .nvmrc
================
v20.18.1

================
File: .prettierignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts


pnpm-lock.yaml

================
File: .prettierrc.yaml
================
trailingComma: all
tabWidth: 2
semi: false
singleQuote: true
printWidth: 80
plugins:
  - prettier-plugin-tailwindcss

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "src/app/globals.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/utils/tailwind"
  }
}

================
File: components/ui/accordion.tsx
================
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className={cn(
      "overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down",
      className
    )}
    {...props}
  >
    <div className="pb-4 pt-0">{children}</div>
  </AccordionPrimitive.Content>
))
AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

================
File: components/ui/alert-dialog.tsx
================
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = ({
  className,
  children,
  ...props
}: AlertDialogPrimitive.AlertDialogPortalProps) => (
  <AlertDialogPrimitive.Portal className={cn(className)} {...props}>
    <div className="fixed inset-0 z-50 flex items-end justify-center sm:items-center">
      {children}
    </div>
  </AlertDialogPrimitive.Portal>
)
AlertDialogPortal.displayName = AlertDialogPrimitive.Portal.displayName

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, children, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-background/80 backdrop-blur-sm transition-opacity animate-in fade-in",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed z-50 grid w-full max-w-lg scale-100 gap-4 border bg-background p-6 opacity-100 shadow-lg animate-in fade-in-90 slide-in-from-bottom-10 sm:rounded-lg sm:zoom-in-90 sm:slide-in-from-bottom-0",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

================
File: components/ui/alert.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg]:absolute [&>svg]:text-foreground [&>svg]:left-4 [&>svg]:top-4 [&>svg+div]:translate-y-[-3px] [&>svg~*]:pl-7",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "text-destructive border-destructive/50 dark:border-destructive [&>svg]:text-destructive text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }

================
File: components/ui/aspect-ratio.tsx
================
"use client"

import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }

================
File: components/ui/avatar.tsx
================
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

================
File: components/ui/badge.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center border rounded-full px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "bg-primary hover:bg-primary/80 border-transparent text-primary-foreground",
        secondary:
          "bg-secondary hover:bg-secondary/80 border-transparent text-secondary-foreground",
        destructive:
          "bg-destructive hover:bg-destructive/80 border-transparent text-destructive-foreground",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }

================
File: components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "underline-offset-4 hover:underline text-primary",
      },
      size: {
        default: "h-10 py-2 px-4",
        sm: "h-9 px-3 rounded-md",
        lg: "h-11 px-8 rounded-md",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: components/ui/calendar.tsx
================
"use client"

import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "text-center text-sm p-0 relative [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside: "text-muted-foreground opacity-50",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ...props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ...props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }

================
File: jest.config.js
================
const nextJest = require('next/jest')

const createJestConfig = nextJest({
  // Provide the path to your Next.js app to load next.config.js and .env files in your test environment
  dir: './',
})

// Add any custom config to be passed to Jest
const customJestConfig = {
  setupFilesAfterEnv: ['<rootDir>/jest.setup.ts'],
  setupFiles: ['<rootDir>/jest.polyfills.js'],
  moduleNameMapper: {
    '^@/(.*)$': '<rootDir>/src/$1',
  },
  testEnvironment: 'jsdom',
  transform: {
    '^.+\\.(t|j)sx?$': '@swc/jest',
  },
  testEnvironmentOptions: {
    customExportConditions: [''],
  },
}

// createJestConfig is exported this way to ensure that next/jest can load the Next.js config which is async
module.exports = createJestConfig(customJestConfig)

================
File: jest.polyfills.js
================
/**
 * @note The block below contains polyfills for Node.js globals
 * required for Jest to function when running JSDOM tests.
 * These HAVE to be require's and HAVE to be in this exact
 * order, since "undici" depends on the "TextEncoder" global API.
 *
 * Consider migrating to a more modern test runner if
 * you don't want to deal with this.
 */

const { TextDecoder, TextEncoder, ReadableStream } = require('node:util')

Object.defineProperties(globalThis, {
  TextDecoder: { value: TextDecoder },
  TextEncoder: { value: TextEncoder },
  ReadableStream: { value: ReadableStream },
})

const { Blob, File } = require('node:buffer')
const { fetch, Headers, FormData, Request, Response } = require('undici')

Object.defineProperties(globalThis, {
  fetch: { value: fetch, writable: true },
  Blob: { value: Blob },
  File: { value: File },
  Headers: { value: Headers },
  FormData: { value: FormData },
  Request: { value: Request },
  Response: { value: Response },
})

================
File: jest.setup.ts
================
// Learn more: https://github.com/testing-library/jest-dom
import { server } from '@/mocks/server'
import { QueryCache } from '@tanstack/react-query'
import '@testing-library/jest-dom'

const queryCache = new QueryCache()
// Establish API mocking before all tests.
beforeAll(() => server.listen())
// Reset any request handlers that we may add during the tests,
// so they don't affect other tests.
afterEach(() => {
  server.resetHandlers()
  queryCache.clear()
})
// Clean up after the tests are finished.
afterAll(() => server.close())

================
File: LICENSE
================
MIT License

Copyright (c) 2024 Michael

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: next-env.d.ts
================
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/building-your-application/configuring/typescript for more information.

================
File: next.config.js
================
const withBundleAnalyzer = require('@next/bundle-analyzer')({
  enabled: process.env.ANALYZE === 'true',
})

/** @type {import('next').NextConfig} */
const nextConfig = {
  images: {
    domains: ['i.bo3.no'], // Allow images from Good Game Ligaen
  },
}

module.exports = withBundleAnalyzer(nextConfig)

================
File: package.json
================
{
  "name": "supa-next-starter",
  "description": "A production ready Next.js/Supabase starter. ",
  "version": "1.0.0",
  "private": true,
  "author": "Michael Troya <hi@michaeltroya.ca> (@michaeltroya)",
  "license": "MIT",
  "keywords": [
    "nextjs",
    "starter",
    "supabase",
    "tailwindcss",
    "shadcn",
    "typescript"
  ],
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "format": "prettier --write .",
    "format-check": "prettier --check .",
    "type-check": "tsc --pretty --noEmit",
    "prepare": "husky install",
    "test": "jest",
    "test:ci": "jest --ci",
    "analyze": "ANALYZE=true pnpm build"
  },
  "dependencies": {
    "@next/bundle-analyzer": "^14.0.4",
    "@radix-ui/react-accordion": "^1.2.2",
    "@radix-ui/react-alert-dialog": "^1.1.5",
    "@radix-ui/react-aspect-ratio": "^1.1.1",
    "@radix-ui/react-avatar": "^1.1.2",
    "@radix-ui/react-dropdown-menu": "^2.0.6",
    "@radix-ui/react-icons": "^1.3.0",
    "@radix-ui/react-label": "^2.1.1",
    "@radix-ui/react-radio-group": "^1.2.2",
    "@radix-ui/react-separator": "^1.1.1",
    "@radix-ui/react-slot": "^1.1.1",
    "@radix-ui/react-toast": "^1.2.5",
    "@supabase/ssr": "^0.1.0",
    "@supabase/supabase-js": "^2.39.3",
    "@tanstack/react-query": "^5.17.15",
    "@tanstack/react-query-devtools": "^5.17.15",
    "@vercel/analytics": "^1.1.1",
    "axios": "^1.6.5",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "date-fns": "^4.1.0",
    "geist": "^1.0.0",
    "lucide-react": "^0.304.0",
    "next": "^14.1.0",
    "next-themes": "^0.2.1",
    "nextjs-toploader": "^1.6.4",
    "react": "18.2.0",
    "react-day-picker": "^9.5.1",
    "react-dom": "18.2.0",
    "tailwind-merge": "^2.6.0",
    "undici": "^5.28.2",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@shadcn/ui": "^0.0.4",
    "@swc/core": "^1.3.102",
    "@swc/jest": "^0.2.29",
    "@testing-library/dom": "^9.3.3",
    "@testing-library/jest-dom": "^6.2.0",
    "@testing-library/react": "^14.1.2",
    "@testing-library/user-event": "^14.5.2",
    "@types/jest": "^29.5.11",
    "@types/node": "20.3.1",
    "@types/react": "18.2.8",
    "@types/react-dom": "18.2.5",
    "autoprefixer": "10.4.15",
    "encoding": "^0.1.13",
    "eslint": "8.56.0",
    "eslint-config-next": "14.0.4",
    "husky": "^8.0.0",
    "jest": "^29.7.0",
    "jest-environment-jsdom": "^29.7.0",
    "lint-staged": "^15.2.0",
    "msw": "^2.1.1",
    "postcss": "8.4.29",
    "prettier": "^3.1.1",
    "prettier-plugin-tailwindcss": "^0.5.10",
    "tailwindcss": "3.3.3",
    "tailwindcss-animate": "^1.0.7",
    "typescript": "5.1.3"
  },
  "msw": {
    "workerDirectory": [
      "public"
    ]
  },
  "packageManager": "pnpm@9.15.2+sha512.93e57b0126f0df74ce6bff29680394c0ba54ec47246b9cf321f0121d8d9bb03f750a705f24edc3c1180853afd7c2c3b94196d0a3d53d3e069d9e2793ef11f321"
}

================
File: postcss.config.js
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: README.md
================
![image](https://github.com/michaeltroya/supa-next-starter/assets/38507347/2ea40874-98de-49ec-ab6a-74c816e6ca22)

<h1 align="center">⚡ SupaNext Starter Kit ⚡</h1>

<p align="center">
 The Last Next.js and Supabase Starter You Will Ever Need
</p>

<div align="center">

<img alt="GitHub License" src="https://img.shields.io/github/license/michaeltroya/supa-next-starter">

  <a href="https://twitter.com/intent/follow?screen_name=michaeltroya_">
   <img alt="X (formerly Twitter) Follow" src="https://img.shields.io/twitter/follow/michaeltroya_">
  </a>
</div>

<div align="center">
  <sub>Created by <a href="https://twitter.com/michaeltroya_">Michael Troya</a>
</div>

<br/>

<p align="center">
  <a href="#features"><strong>Features</strong></a> ·
  <a href="#clone-and-run-locally"><strong>Clone and run locally</strong></a> ·
  <a href="#documentation"><strong>Documentation</strong></a> ·
  <a href="#feedback-and-issues"><strong>Feedback and issues</strong></a>
</p>
<br/>

## Features

- ⚡️ Next.js 14 (App Router)
- 💚 Supabase w/ supabase-ssr - Works across the entire [Next.js](https://nextjs.org) stack (App Router, Pages Router, Client, Server, Middleware, It just works!)
- ⚛️ React 18
- ⛑ TypeScript
- 📦 [pnpm](https://pnpm.io/) - Fast, disk space efficient package manager
- 🎨 [Tailwind](https://tailwindcss.com/)
- 🔌 [shadcn/ui](https://ui.shadcn.com/) - Beautifully designed components that you can copy and paste into your apps.
- 🧪 Jest w/SWC + React Testing Library - Unit tests for all of your code.
- 🎛️ [MSW](https://mswjs.io/)v2 - Intercept requests inside your tests (set up for testing only)
- 🪝[TanStackQuery](https://tanstack.com/query/v5)v5 - The best way to fetch data on the client
- 📏 ESLint — To find and fix problems in your code
- 💖 Prettier — Code Formatter for consistent style
- 🐶 Husky — For running scripts before committing
- 🚫 lint-staged — Run ESLint and Prettier against staged Git files
- 👷 Github Actions — Run Type Checks, Tests, and Linters on Pull Requests
- 🗂 Path Mapping — Import components or images using the `@` prefix
- ⚪⚫ Dark mode - Toggle theme modes with [next-themes](https://github.com/pacocoursey/next-themes)
- ✨ Next Top Loader - Render a pleasent top loader on navigation with [nextjs-toploader](https://github.com/TheSGJ/nextjs-toploader)
- 🔋 Lots Extras - Next Bundle Analyzer, Vercel Analytics, Vercel Geist Font

## Clone and run locally

1. You'll first need a Supabase project which can be made [via the Supabase dashboard](https://database.new)

2. Create a Next.js app using the Supabase Starter template npx command

   ```bash
   pnpm create next-app -e https://github.com/michaeltroya/supa-next-starter
   # or
   npx create-next-app -e https://github.com/michaeltroya/supa-next-starter
   ```

3. Use `cd` to change into the app's directory

   ```bash
   cd name-of-new-app
   ```

4. Rename `.env.local.example` to `.env.local` and update the following:

   ```
   NEXT_PUBLIC_SUPABASE_URL=[INSERT SUPABASE PROJECT URL]
   NEXT_PUBLIC_SUPABASE_ANON_KEY=[INSERT SUPABASE PROJECT API ANON KEY]
   ```

   Both `NEXT_PUBLIC_SUPABASE_URL` and `NEXT_PUBLIC_SUPABASE_ANON_KEY` can be found in [your Supabase project's API settings](https://app.supabase.com/project/_/settings/api)

5. You can now run the Next.js local development server:

   ```bash
   pnpm run dev
   ```

   The starter kit should now be running on [localhost:3000](http://localhost:3000/).

> Check out [the docs for Local Development](https://supabase.com/docs/guides/getting-started/local-development) to also run Supabase locally.

## Showcase

Websites started using this template:

- [mainspring.pro](https://www.mainspring.pro/)
- [Add yours](https://github.com/michaeltroya/supa-next-starter/edit/main/README.md)

# Documentation

### Requirements

- Node.js >= 18.17.0
- pnpm 8

### Scripts

- `pnpm dev` — Starts the application in development mode at `http://localhost:3000`.
- `pnpm build` — Creates an optimized production build of your application.
- `pnpm start` — Starts the application in production mode.
- `pnpm type-check` — Validate code using TypeScript compiler.
- `pnpm lint` — Runs ESLint for all files in the `src` directory.
- `pnpm format-check` — Runs Prettier and checks if any files have formatting issues.
- `pnpm format` — Runs Prettier and formats files.
- `pnpm test` — Runs all the jest tests in the project.
- `pnpm test:ci` — Runs all the jest tests in the project, Jest will assume it is running in a CI environment.
- `pnpm analyze` — Builds the project and opens the bundle analyzer.

### Paths

TypeScript is pre-configured with custom path mappings. To import components or files, use the `@` prefix.

```tsx
import { Button } from '@/components/ui/Button'

// To import images or other files from the public folder
import avatar from '@/public/avatar.png'
```

### Switch to Yarn/npm

This starter uses pnpm by default, but this choice is yours. If you'd like to switch to Yarn/npm, delete the `pnpm-lock.yaml` file, install the dependencies with Yarn/npm, change the CI workflow, and Husky Git hooks to use Yarn/npm commands.

## License

This project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for more information.

## Feedback and issues

Please file feedback and issues [here](https://github.com/michaeltroya/supa-next-starter/issues).

================
File: src/app/admin/page.tsx
================
'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { Card } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { createBrowserClient } from '@/utils/supabase'
import { toast } from '@/components/ui/use-toast'

interface AdminStats {
  totalUsers: number
  totalPicks: number
  pendingMatches: number
  lastSyncTime: string | null
  lastSyncMatches: number
}

interface Pick {
  id: string
  user_id: string
  match_id: string
  predicted_winner: string
  is_correct: boolean | null
  created_at: string
  user: {
    email: string
  }
  match: {
    team1: string
    team2: string
    start_time: string
  }
}

export default function AdminPage() {
  const [stats, setStats] = useState<AdminStats | null>(null)
  const [isSyncing, setIsSyncing] = useState(false)
  const [isUpdatingPoints, setIsUpdatingPoints] = useState(false)
  const [recentPicks, setRecentPicks] = useState<Pick[]>([])
  const [error, setError] = useState<string | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const router = useRouter()
  const supabase = createBrowserClient()

  useEffect(() => {
    async function checkAdminAndLoadData() {
      try {
        // Check if user is authenticated and admin
        const { data: { user } } = await supabase.auth.getUser()
        if (!user) {
          router.push('/login')
          return
        }

        const { data: userData } = await supabase
          .from('users')
          .select('is_admin')
          .eq('id', user.id)
          .single()

        if (!userData?.is_admin) {
          router.push('/')
          return
        }

        // Fetch admin stats
        const now = new Date().toISOString()

        const [
          { count: userCount },
          { count: pickCount },
          { data: syncData }
        ] = await Promise.all([
          supabase.from('users').select('*', { count: 'exact', head: true }),
          supabase.from('picks').select('*', { count: 'exact', head: true }),
          supabase.from('sync_logs')
            .select('*')
            .order('created_at', { ascending: false })
            .limit(1)
        ])

        // Get sync status from our API endpoint
        const syncStatusResponse = await fetch('/api/admin/sync')
        const syncStatus = await syncStatusResponse.json()

        setStats({
          totalUsers: userCount || 0,
          totalPicks: pickCount || 0,
          pendingMatches: syncStatus.pending_matches || 0,
          lastSyncTime: syncStatus.last_sync,
          lastSyncMatches: syncStatus.last_sync_matches || 0
        })

        // Fetch recent picks
        const { data: picks } = await supabase
          .from('picks')
          .select(`
            *,
            user:user_id (email),
            match:match_id (team1, team2, start_time)
          `)
          .order('created_at', { ascending: false })
          .limit(5)

        setRecentPicks(picks as Pick[] || [])
      } catch (err) {
        console.error('Error loading admin data:', err)
        setError('Failed to load admin data')
      } finally {
        setIsLoading(false)
      }
    }

    checkAdminAndLoadData()
  }, [supabase, router])

  const handleSync = async () => {
    try {
      setIsSyncing(true)
      const response = await fetch('/api/admin/sync', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || 'Sync failed')
      }

      const result = await response.json()
      
      // Refresh the page data
      router.refresh()
      
      // Show success message
      toast({
        title: 'Success',
        description: `Synced ${result.synced_matches} matches`,
      })
    } catch (err) {
      console.error('Error syncing:', err)
      toast({
        title: 'Error',
        description: err instanceof Error ? err.message : 'Failed to sync matches',
        variant: 'destructive',
      })
    } finally {
      setIsSyncing(false)
    }
  }

  const handleUpdatePoints = async () => {
    try {
      setIsUpdatingPoints(true)
      const response = await fetch('/api/cron/update-points', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${process.env.NEXT_PUBLIC_CRON_SECRET_KEY}`
        }
      })

      if (!response.ok) {
        throw new Error('Points update failed')
      }

      const result = await response.json()
      router.refresh()
    } catch (err) {
      console.error('Error updating points:', err)
      setError('Failed to update points')
    } finally {
      setIsUpdatingPoints(false)
    }
  }

  const handlePointAdjustment = async (pickId: string, isCorrect: boolean) => {
    try {
      const reason = prompt('Please enter a reason for this adjustment:')
      if (!reason) return

      const response = await fetch('/api/admin/points', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          pick_id: pickId,
          is_correct: isCorrect,
          reason
        })
      })

      if (!response.ok) {
        throw new Error('Failed to adjust points')
      }

      // Refresh the page to show updated data
      router.refresh()
    } catch (err) {
      console.error('Error adjusting points:', err)
      setError('Failed to adjust points')
    }
  }

  if (isLoading) {
    return (
      <div className="container mx-auto p-4">
        <div className="animate-pulse space-y-4">
          {[1, 2, 3].map((i) => (
            <div key={i} className="h-32 rounded-lg bg-gray-200" />
          ))}
        </div>
      </div>
    )
  }

  return (
    <div className="container mx-auto p-4">
      <div className="mb-8">
        <h1 className="mb-2 text-3xl font-bold">Admin Panel</h1>
        <p className="text-muted-foreground">
          Manage matches and user predictions
        </p>
      </div>

      {error && (
        <div className="mb-4 rounded bg-red-100 p-4 text-red-700">
          {error}
        </div>
      )}

      <div className="mb-8 grid gap-4 md:grid-cols-4">
        <Card className="p-6">
          <div className="text-sm text-muted-foreground">Total Users</div>
          <div className="mt-2 text-2xl font-bold">{stats?.totalUsers}</div>
        </Card>
        <Card className="p-6">
          <div className="text-sm text-muted-foreground">Total Predictions</div>
          <div className="mt-2 text-2xl font-bold">{stats?.totalPicks}</div>
        </Card>
        <Card className="p-6">
          <div className="text-sm text-muted-foreground">Pending Matches</div>
          <div className="mt-2 text-2xl font-bold">{stats?.pendingMatches}</div>
        </Card>
        <Card className="p-6">
          <div className="text-sm text-muted-foreground">Last Sync</div>
          <div className="mt-2 text-sm">
            {stats?.lastSyncTime 
              ? new Date(stats.lastSyncTime).toLocaleString()
              : 'Never'}
          </div>
        </Card>
      </div>

      <div className="mb-8">
        <div className="mb-4 flex items-center justify-between">
          <h2 className="text-xl font-semibold">Match Synchronization</h2>
          <div className="flex gap-2">
            <Button 
              onClick={handleSync} 
              disabled={isSyncing}
            >
              {isSyncing ? 'Syncing...' : 'Sync Matches'}
            </Button>
            <Button
              onClick={handleUpdatePoints}
              disabled={isUpdatingPoints}
              variant="secondary"
            >
              {isUpdatingPoints ? 'Updating...' : 'Update Points'}
            </Button>
          </div>
        </div>
        <Card className="p-4">
          <p className="text-sm text-muted-foreground">
            {stats?.pendingMatches === 0 
              ? 'All matches are up to date'
              : `${stats?.pendingMatches} matches need to be synced`}
          </p>
          {stats?.lastSyncTime && (
            <p className="text-sm text-muted-foreground mt-2">
              Last sync: {new Date(stats.lastSyncTime).toLocaleString()} ({stats.lastSyncMatches} matches)
            </p>
          )}
        </Card>
      </div>

      <div className="mb-8">
        <h2 className="mb-4 text-xl font-semibold">Recent Predictions</h2>
        <div className="space-y-4">
          {recentPicks.map((pick) => (
            <Card key={pick.id} className="p-4">
              <div className="flex items-center justify-between">
                <div>
                  <div className="font-medium">
                    {pick.match.team1} vs {pick.match.team2}
                  </div>
                  <div className="mt-1 text-sm text-muted-foreground">
                    by {pick.user.email} • Predicted: {pick.predicted_winner}
                  </div>
                </div>
                <div className="flex gap-2">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handlePointAdjustment(pick.id, true)}
                    disabled={pick.is_correct === true}
                  >
                    Mark Correct
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handlePointAdjustment(pick.id, false)}
                    disabled={pick.is_correct === false}
                  >
                    Mark Incorrect
                  </Button>
                </div>
              </div>
            </Card>
          ))}

          {recentPicks.length === 0 && (
            <div className="rounded-lg border border-dashed p-8 text-center">
              <p className="text-muted-foreground">No recent predictions</p>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}

================
File: src/app/api/admin/points/route.ts
================
import { NextResponse } from 'next/server'
import { cookies } from 'next/headers'
import { createServerClient } from '@/utils/supabase'
import { z } from 'zod'

// Schema for validating the request body
const adjustmentSchema = z.object({
  pick_id: z.string().uuid(),
  is_correct: z.boolean(),
  reason: z.string().min(1)
})

async function isAdmin(userId: string) {
  const cookieStore = cookies()
  const supabase = createServerClient(cookieStore)
  
  const { data } = await supabase
    .from('users')
    .select('is_admin')
    .eq('id', userId)
    .single()
  
  return data?.is_admin === true
}

export async function POST(request: Request) {
  try {
    const cookieStore = cookies()
    const supabase = createServerClient(cookieStore)
    
    // Check if user is authenticated and is admin
    const { data: { user } } = await supabase.auth.getUser()
    if (!user || !(await isAdmin(user.id))) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      )
    }

    // Validate request body
    const body = await request.json()
    const validatedData = adjustmentSchema.parse(body)

    // Update the pick
    const { error: updateError } = await supabase
      .from('picks')
      .update({ 
        is_correct: validatedData.is_correct,
        manual_adjustment_reason: validatedData.reason,
        adjusted_by: user.id,
        adjusted_at: new Date().toISOString()
      })
      .eq('id', validatedData.pick_id)

    if (updateError) {
      throw updateError
    }

    return NextResponse.json({
      message: 'Points adjusted successfully'
    })
  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: 'Invalid request data', details: error.errors },
        { status: 400 }
      )
    }

    console.error('Error adjusting points:', error)
    return NextResponse.json(
      { error: 'Failed to adjust points' },
      { status: 500 }
    )
  }
}

================
File: src/app/api/admin/sync/route.ts
================
import { NextResponse } from 'next/server'
import { cookies } from 'next/headers'
import { createServerClient } from '@/utils/supabase'
import { syncMatches } from '@/utils/goodgame'

async function isAdmin(userId: string) {
  const cookieStore = cookies()
  const supabase = createServerClient(cookieStore)
  
  const { data } = await supabase
    .from('users')
    .select('is_admin')
    .eq('id', userId)
    .single()
  
  return data?.is_admin === true
}

// GET endpoint to check sync status
export async function GET(request: Request) {
  try {
    const cookieStore = cookies()
    const supabase = createServerClient(cookieStore)
    
    // Check if user is authenticated and is admin
    const { data: { user } } = await supabase.auth.getUser()
    if (!user || !(await isAdmin(user.id))) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      )
    }

    // Get latest sync info
    const { data: latestSync } = await supabase
      .from('sync_logs')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(1)
      .single()

    // First, check if we have any matches at all
    const { count: totalMatches } = await supabase
      .from('matches')
      .select('*', { count: 'exact', head: true })

    // If we have no matches, we should sync
    if (totalMatches === 0) {
      return NextResponse.json({
        last_sync: latestSync?.created_at || null,
        pending_matches: 1, // Indicate that we need to sync
        last_sync_matches: latestSync?.matches_synced || 0,
        needs_initial_sync: true
      })
    }

    // Get count of matches that need to be synced
    const now = new Date().toISOString()
    const { count: pendingMatches } = await supabase
      .from('matches')
      .select('*', { count: 'exact', head: true })
      .or(`start_time.gt.${now},and(is_finished.eq.false,start_time.lt.${now})`)

    return NextResponse.json({
      last_sync: latestSync?.created_at || null,
      pending_matches: pendingMatches || 0,
      last_sync_matches: latestSync?.matches_synced || 0,
      needs_initial_sync: false
    })
  } catch (error) {
    console.error('Error checking sync status:', error)
    return NextResponse.json(
      { error: 'Failed to check sync status' },
      { status: 500 }
    )
  }
}

// POST endpoint to trigger sync
export async function POST(request: Request) {
  try {
    const cookieStore = cookies()
    const supabase = createServerClient(cookieStore)
    
    // Check if user is authenticated and is admin
    const { data: { user } } = await supabase.auth.getUser()
    if (!user || !(await isAdmin(user.id))) {
      console.error('Unauthorized sync attempt:', { userId: user?.id })
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      )
    }

    console.log('Starting sync process...', {
      userId: user.id,
      timestamp: new Date().toISOString()
    })

    const result = await syncMatches(supabase)

    console.log('Sync completed:', {
      userId: user.id,
      matchesSynced: result.synced_matches,
      timestamp: new Date().toISOString()
    })

    // Update sync log with user info
    const { error: logError } = await supabase
      .from('sync_logs')
      .insert({
        synced_by: user.id,
        matches_synced: result.synced_matches
      })

    if (logError) {
      console.error('Error logging sync:', logError)
      // Continue since the sync was successful
    }

    return NextResponse.json({
      message: 'Sync completed successfully',
      timestamp: new Date().toISOString(),
      ...result
    })
  } catch (error) {
    console.error('Error in sync:', error)
    
    // Try to get more detailed error information
    const errorMessage = error instanceof Error ? error.message : 'Unknown error'
    const errorStack = error instanceof Error ? error.stack : undefined
    
    console.error('Detailed sync error:', {
      message: errorMessage,
      stack: errorStack,
      timestamp: new Date().toISOString()
    })

    return NextResponse.json(
      { 
        error: 'Failed to sync matches',
        details: errorMessage
      },
      { status: 500 }
    )
  }
}

================
File: src/app/api/auth/callback/route.ts
================
import { NextResponse } from 'next/server'
import { cookies } from 'next/headers'
import { createServerClient } from '@/utils/supabase'

export async function GET(request: Request) {
  // The `/auth/callback` route is required for the server-side auth flow implemented
  // by the Auth Helpers package. It exchanges an auth code for the user's session.
  // https://supabase.com/docs/guides/auth/auth-helpers/nextjs#managing-sign-in-with-code-exchange
  const requestUrl = new URL(request.url)
  const code = requestUrl.searchParams.get('code')

  if (code) {
    const cookieStore = cookies()
    const supabase = createServerClient(cookieStore)
    await supabase.auth.exchangeCodeForSession(code)
  }

  // URL to redirect to after sign in process completes
  return NextResponse.redirect(requestUrl.origin)
}

================
File: src/app/api/cron/sync-matches/route.ts
================
import { NextResponse } from 'next/server'
import { cookies } from 'next/headers'
import { createServerClient } from '@/utils/supabase'
import { syncMatches } from '@/utils/goodgame'

export const maxDuration = 300 // 5 minutes max duration

export async function POST(request: Request) {
  try {
    // Verify the request is from a trusted source
    const authHeader = request.headers.get('authorization')
    if (
      !authHeader ||
      authHeader !== `Bearer ${process.env.CRON_SECRET_KEY}`
    ) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      )
    }

    const cookieStore = cookies()
    const supabase = createServerClient(cookieStore)

    const result = await syncMatches(supabase)

    return NextResponse.json(result)
  } catch (error) {
    console.error('Error in sync-matches cron:', error)
    return NextResponse.json(
      { error: 'Failed to sync matches' },
      { status: 500 }
    )
  }
}

================
File: src/app/api/cron/update-points/route.ts
================
import { NextResponse } from 'next/server'
import { cookies } from 'next/headers'
import { createServerClient } from '@/utils/supabase'

// Points configuration
const POINTS_FOR_CORRECT_PICK = 10

interface Match {
  id: string
  division_id: string
  team1_id: string
  team2_id: string
  winner_id: string | null
  start_time: string
  is_finished: boolean
}

interface Pick {
  id: string
  user_id: string
  match_id: string
  predicted_winner: string
  points_awarded: number | null
}

interface MatchResult {
  match_id: string
  winner_id: string
}

export const maxDuration = 300 // 5 minutes max duration for long-running function

export async function POST(request: Request) {
  try {
    // Verify the request is from a trusted source (Vercel Cron or admin)
    const authHeader = request.headers.get('authorization')
    if (
      !authHeader ||
      authHeader !== `Bearer ${process.env.CRON_SECRET_KEY}`
    ) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      )
    }

    const cookieStore = cookies()
    const supabase = createServerClient(cookieStore)

    // 1. Get all finished matches that haven't been processed
    const { data: matches, error: matchesError } = await supabase
      .from('matches')
      .select('*')
      .eq('is_finished', true)
      .eq('points_processed', false)

    if (matchesError) {
      throw matchesError
    }

    if (!matches || matches.length === 0) {
      return NextResponse.json({ message: 'No matches to process' })
    }

    // 2. For each match, get the winner from the Good Game Ligaen API
    const token = process.env.GOOD_GAME_LIGAEN_TOKEN
    const matchResults = await Promise.all(
      matches.map(async (match: Match) => {
        const apiUrl = `https://www.gamer.no/api/paradise/v2/division/${match.division_id}/matchups/${match.id}`
        const response = await fetch(apiUrl, {
          headers: { Authorization: `Bearer ${token}` }
        })
        
        if (!response.ok) {
          console.error(`Failed to fetch match ${match.id}:`, await response.text())
          return null
        }

        const data = await response.json()
        return {
          match_id: match.id,
          winner_id: data.winner_id
        }
      })
    )

    // Filter out any failed API calls and type the results
    const validResults = matchResults.filter((result): result is MatchResult => 
      result !== null && typeof result.winner_id === 'string'
    )

    // 3. Get all picks for these matches
    const matchIds = validResults.map(result => result.match_id)
    const { data: picks, error: picksError } = await supabase
      .from('picks')
      .select('*')
      .in('match_id', matchIds)
      .is('points_awarded', null)

    if (picksError) {
      throw picksError
    }

    if (!picks) {
      return NextResponse.json({ message: 'No picks to process' })
    }

    // 4. Update points for each pick
    const updates = picks.map((pick: Pick) => {
      const matchResult = validResults.find(r => r.match_id === pick.match_id)
      if (!matchResult) return null

      const points = pick.predicted_winner === matchResult.winner_id
        ? POINTS_FOR_CORRECT_PICK
        : 0

      return supabase
        .from('picks')
        .update({
          points_awarded: points,
          is_correct: pick.predicted_winner === matchResult.winner_id
        })
        .eq('id', pick.id)
    })

    await Promise.all(updates.filter(Boolean))

    // 5. Mark matches as processed
    await supabase
      .from('matches')
      .update({ points_processed: true })
      .in('id', matchIds)

    // 6. Update user total points (using a database function for atomicity)
    await supabase.rpc('update_user_total_points')

    return NextResponse.json({
      message: 'Points updated successfully',
      processed_matches: validResults.length,
      processed_picks: picks.length
    })
  } catch (error) {
    console.error('Error updating points:', error)
    return NextResponse.json(
      { error: 'Failed to update points' },
      { status: 500 }
    )
  }
}

================
File: src/app/api/matches/[round]/route.ts
================
// src/app/api/matches/[round]/route.ts
import { NextResponse } from 'next/server';

export async function GET(
  request: Request,
  { params }: { params: { round: string } }
) {
  const { round } = params;
  const token = process.env.GOOD_GAME_LIGAEN_TOKEN;
  
  // Replace <division_id> with the actual division ID or make it dynamic as needed.
  const apiUrl = `https://www.gamer.no/api/paradise/v2/division/<division_id>/matchups?round_number=${round}&include_maps=1&include_streams=1`;

  const response = await fetch(apiUrl, {
    headers: { Authorization: `Bearer ${token}` }
  });
  
  if (!response.ok) {
    return NextResponse.error();
  }
  
  const data = await response.json();
  return NextResponse.json(data);
}

================
File: src/app/api/message/route.ts
================
import { NextResponse } from 'next/server'

export async function GET() {
  return NextResponse.json({ message: 'Hello from the API!' })
}

================
File: src/app/api/picks/route.ts
================
import { NextResponse } from 'next/server'
import { cookies } from 'next/headers'
import { createServerClient } from '@/utils/supabase'
import { z } from 'zod'

// Schema for validating the request body
const pickSchema = z.object({
  user_id: z.string().uuid(),
  match_id: z.string().uuid(),
  predicted_winner: z.string().uuid()
})

export async function POST(request: Request) {
  try {
    // Parse request body
    const body = await request.json()
    
    // Validate request body against schema
    const validatedData = pickSchema.parse(body)
    
    // Initialize Supabase client
    const cookieStore = cookies()
    const supabase = createServerClient(cookieStore)
    
    // Insert the pick into the database
    const { data, error } = await supabase
      .from('picks')
      .insert([{
        user_id: validatedData.user_id,
        match_id: validatedData.match_id,
        predicted_winner: validatedData.predicted_winner
      }])
      .select()
      .single()
    
    if (error) {
      return NextResponse.json(
        { error: 'Failed to save prediction' },
        { status: 400 }
      )
    }
    
    return NextResponse.json(
      { message: 'Prediction saved successfully', data },
      { status: 201 }
    )
  } catch (err) {
    if (err instanceof z.ZodError) {
      return NextResponse.json(
        { error: 'Invalid request data', details: err.errors },
        { status: 400 }
      )
    }
    
    console.error('Error saving prediction:', err)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}

================
File: src/app/api/setup-admin/route.ts
================
import { NextResponse } from 'next/server'
import { cookies } from 'next/headers'
import { createServerClient } from '@/utils/supabase'

export async function POST(request: Request) {
  try {
    const cookieStore = cookies()
    const supabase = createServerClient(cookieStore)
    
    // Check if user is authenticated
    const { data: { user } } = await supabase.auth.getUser()
    if (!user) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      )
    }

    // Check if there are any admins
    const { count } = await supabase
      .from('users')
      .select('*', { count: 'exact', head: true })
      .eq('is_admin', true)

    // If there are already admins, only existing admins can create new ones
    if (count && count > 0) {
      const { data: isAdmin } = await supabase
        .from('users')
        .select('is_admin')
        .eq('id', user.id)
        .single()

      if (!isAdmin?.is_admin) {
        return NextResponse.json(
          { error: 'Only existing admins can create new admins' },
          { status: 403 }
        )
      }
    }

    // Get the target user ID from the request body
    const { targetUserId = user.id } = await request.json()

    // Update the user to be an admin
    const { error: updateError } = await supabase
      .from('users')
      .update({ is_admin: true })
      .eq('id', targetUserId)

    if (updateError) {
      throw updateError
    }

    return NextResponse.json({
      message: 'Admin privileges granted successfully'
    })
  } catch (error) {
    console.error('Error in setup-admin:', error)
    return NextResponse.json(
      { error: 'Failed to setup admin user' },
      { status: 500 }
    )
  }
}

================
File: src/app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 240 10% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 240 10% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 240 10% 3.9%;
    --primary: 240 5.9% 10%;
    --primary-foreground: 0 0% 98%;
    --secondary: 240 4.8% 95.9%;
    --secondary-foreground: 240 5.9% 10%;
    --muted: 240 4.8% 95.9%;
    --muted-foreground: 240 3.8% 46.1%;
    --accent: 240 4.8% 95.9%;
    --accent-foreground: 240 5.9% 10%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 5.9% 90%;
    --input: 240 5.9% 90%;
    --ring: 240 5.9% 10%;
    --radius: 0.3rem;
  }

  .dark {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;
    --card: 240 10% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 240 10% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 240 5.9% 10%;
    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;
    --accent: 240 3.7% 15.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --ring: 240 4.9% 83.9%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

================
File: src/app/layout.tsx
================
import { GeistSans } from 'geist/font/sans'
import ThemeProvider from '@/providers/ThemeProvider'
import NextTopLoader from 'nextjs-toploader'
import { Analytics } from '@vercel/analytics/react'
import './globals.css'
import { ReactQueryDevtools } from '@tanstack/react-query-devtools'
import ReactQueryProvider from '@/providers/ReactQueryProvider'
import { Toaster } from '@/components/Toaster'
import Navigation from '@/components/Navigation'

const defaultUrl = process.env.VERCEL_URL
  ? `https://${process.env.VERCEL_URL}`
  : 'http://localhost:3000'

export const metadata = {
  metadataBase: new URL(defaultUrl),
  title: 'Good Game Pickems',
  description: 'Make predictions for Good Game Ligaen matches and compete with others!',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html
      lang="en"
      className={GeistSans.className}
      style={{ colorScheme: 'dark' }}
      suppressHydrationWarning
    >
      <body className="bg-background text-foreground">
        <NextTopLoader showSpinner={false} height={2} color="#2acf80" />
        <ThemeProvider
          attribute="class"
          defaultTheme="dark"
          enableSystem
          disableTransitionOnChange
        >
          <ReactQueryProvider>
            <div className="flex min-h-screen flex-col">
              <Navigation />
              <main className="flex-1">
                {children}
              </main>
              <Analytics />
            </div>
            <ReactQueryDevtools initialIsOpen={false} />
          </ReactQueryProvider>
        </ThemeProvider>
        <Toaster />
      </body>
    </html>
  )
}

================
File: src/app/leaderboard/page.tsx
================
'use client'

import React, { useState, useEffect } from 'react'
import { Card } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { createBrowserClient } from '@/utils/supabase'

type TimeRange = 'all' | 'weekly' | 'monthly'

interface LeaderboardEntry {
  user_id: string
  user_email: string
  points: number
  correct_picks: number
  total_picks: number
}

interface LeaderboardResult {
  user_id: string
  email: string
  correct_picks: number
  total_picks: number
}

export default function LeaderboardPage() {
  const [timeRange, setTimeRange] = useState<TimeRange>('all')
  const [leaderboard, setLeaderboard] = useState<LeaderboardEntry[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  const supabase = createBrowserClient()

  useEffect(() => {
    async function fetchLeaderboard() {
      setIsLoading(true)
      setError(null)
      
      try {
        const now = new Date()
        let timeFilter = ''
        
        if (timeRange === 'weekly') {
          const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000)
          timeFilter = `and created_at >= '${weekAgo.toISOString()}'`
        } else if (timeRange === 'monthly') {
          const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000)
          timeFilter = `and created_at >= '${monthAgo.toISOString()}'`
        }

        const { data, error: queryError } = await supabase
          .rpc('get_leaderboard', { time_filter: timeFilter })

        if (queryError) throw queryError

        const formattedData: LeaderboardEntry[] = (data as LeaderboardResult[]).map(entry => ({
          user_id: entry.user_id,
          user_email: entry.email || 'Unknown User',
          points: entry.correct_picks * 10,
          correct_picks: entry.correct_picks,
          total_picks: entry.total_picks
        }))

        setLeaderboard(formattedData)
      } catch (err) {
        console.error('Error fetching leaderboard:', err)
        setError('Failed to load leaderboard data')
      } finally {
        setIsLoading(false)
      }
    }

    fetchLeaderboard()
  }, [timeRange, supabase])

  if (isLoading) {
    return (
      <div className="container mx-auto p-4">
        <div className="animate-pulse space-y-4">
          {[1, 2, 3, 4, 5].map((i) => (
            <div key={i} className="h-16 rounded-lg bg-gray-200" />
          ))}
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="container mx-auto p-4">
        <div className="rounded bg-red-100 p-4 text-red-700">
          {error}
        </div>
      </div>
    )
  }

  return (
    <div className="container mx-auto p-4">
      <div className="mb-8">
        <h1 className="mb-6 text-3xl font-bold">Leaderboard</h1>
        <div className="flex gap-2">
          <Button
            variant={timeRange === 'all' ? 'default' : 'outline'}
            onClick={() => setTimeRange('all')}
          >
            All Time
          </Button>
          <Button
            variant={timeRange === 'monthly' ? 'default' : 'outline'}
            onClick={() => setTimeRange('monthly')}
          >
            Monthly
          </Button>
          <Button
            variant={timeRange === 'weekly' ? 'default' : 'outline'}
            onClick={() => setTimeRange('weekly')}
          >
            Weekly
          </Button>
        </div>
      </div>

      <div className="space-y-4">
        {leaderboard.map((entry, index) => (
          <Card key={entry.user_id} className="p-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-4">
                <div className="flex h-8 w-8 items-center justify-center rounded-full bg-primary text-primary-foreground">
                  {index + 1}
                </div>
                <div>
                  <div className="font-semibold">{entry.user_email}</div>
                  <div className="text-sm text-gray-500">
                    {entry.correct_picks} correct out of {entry.total_picks} picks
                  </div>
                </div>
              </div>
              <div className="text-xl font-bold">{entry.points} pts</div>
            </div>
          </Card>
        ))}

        {leaderboard.length === 0 && (
          <div className="rounded-lg border border-dashed p-8 text-center">
            <p className="text-gray-500">No predictions made during this time period</p>
          </div>
        )}
      </div>
    </div>
  )
}

================
File: src/app/login/page.tsx
================
import Link from 'next/link'
import { headers, cookies } from 'next/headers'
import { redirect } from 'next/navigation'
import { createServerClient } from '@/utils/supabase'

export default function Login({
  searchParams,
}: {
  searchParams: { message: string }
}) {
  const signIn = async (formData: FormData) => {
    'use server'

    const email = formData.get('email') as string
    const password = formData.get('password') as string
    const cookieStore = cookies()
    const supabase = createServerClient(cookieStore)

    const { error } = await supabase.auth.signInWithPassword({
      email,
      password,
    })

    if (error) {
      return redirect('/login?message=Could not authenticate user')
    }

    return redirect('/')
  }

  const signUp = async (formData: FormData) => {
    'use server'

    const origin = headers().get('origin')
    const email = formData.get('email') as string
    const password = formData.get('password') as string
    const cookieStore = cookies()
    const supabase = createServerClient(cookieStore)

    const { error } = await supabase.auth.signUp({
      email,
      password,
      options: {
        emailRedirectTo: `${origin}/api/auth/callback`,
      },
    })

    if (error) {
      return redirect('/login?message=Could not authenticate user')
    }

    return redirect('/login?message=Check email to continue sign in process')
  }

  return (
    <div className="flex w-full flex-1 flex-col justify-center gap-2 px-8 sm:max-w-md">
      <Link
        href="/"
        className="bg-btn-background hover:bg-btn-background-hover group absolute left-8 top-8 flex items-center rounded-md px-4 py-2 text-sm text-foreground no-underline"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          strokeWidth="2"
          strokeLinecap="round"
          strokeLinejoin="round"
          className="mr-2 h-4 w-4 transition-transform group-hover:-translate-x-1"
        >
          <polyline points="15 18 9 12 15 6" />
        </svg>{' '}
        Back
      </Link>

      <form
        className="flex w-full flex-1 flex-col justify-center gap-2 text-foreground animate-in"
        action={signIn}
      >
        <label className="text-md" htmlFor="email">
          Email
        </label>
        <input
          className="mb-6 rounded-md border bg-inherit px-4 py-2"
          name="email"
          placeholder="you@example.com"
          required
        />
        <label className="text-md" htmlFor="password">
          Password
        </label>
        <input
          className="mb-6 rounded-md border bg-inherit px-4 py-2"
          type="password"
          name="password"
          placeholder="••••••••"
          required
        />
        <button className="mb-2 rounded-md bg-green-700 px-4 py-2 text-foreground">
          Sign In
        </button>
        <button
          formAction={signUp}
          className="mb-2 rounded-md border border-foreground/20 px-4 py-2 text-foreground"
        >
          Sign Up
        </button>
        {searchParams?.message && (
          <p className="mt-4 bg-foreground/10 p-4 text-center text-foreground">
            {searchParams.message}
          </p>
        )}
      </form>
    </div>
  )
}

================
File: src/app/matches/actions.ts
================
'use server'

import { cookies } from 'next/headers'
import { createServerClient } from '@/utils/supabase'
import { revalidatePath } from 'next/cache'

export async function submitPrediction(matchId: string, predictedWinner: string, userId: string) {
  try {
    const cookieStore = cookies()
    const supabase = createServerClient(cookieStore)

    const { error } = await supabase
      .from('picks')
      .insert({
        match_id: matchId,
        user_id: userId,
        predicted_winner: predictedWinner
      })

    if (error) {
      console.error('Error saving prediction:', error)
      return { error: 'Failed to save prediction' }
    }

    // Revalidate the matches page to show updated state
    revalidatePath('/matches')
    return { success: true }
  } catch (error) {
    console.error('Error in submitPrediction:', error)
    return { error: 'An unexpected error occurred' }
  }
}

================
File: src/app/matches/MatchList.tsx
================
'use client'

import { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Card } from '@/components/ui/card'
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'
import { Label } from '@/components/ui/label'
import { Separator } from '@/components/ui/separator'
import { useRouter } from 'next/navigation'
import { submitPrediction } from './actions'
import { Match } from './types'
import Image from 'next/image'

interface MatchListProps {
  matches: Match[]
  userId: string
}

export default function MatchList({ matches, userId }: MatchListProps) {
  const router = useRouter()
  const [submitting, setSubmitting] = useState<Record<string, boolean>>({})
  const [errors, setErrors] = useState<Record<string, string>>({})

  const handleSubmit = async (matchId: string, winner: string) => {
    setSubmitting(prev => ({ ...prev, [matchId]: true }))
    setErrors(prev => ({ ...prev, [matchId]: '' }))

    try {
      const result = await submitPrediction(matchId, winner, userId)

      if (result.error) {
        setErrors(prev => ({
          ...prev,
          [matchId]: result.error
        }))
      }
    } catch (error) {
      console.error('Error submitting prediction:', error)
      setErrors(prev => ({
        ...prev,
        [matchId]: 'Failed to submit prediction. Please try again.'
      }))
    } finally {
      setSubmitting(prev => ({ ...prev, [matchId]: false }))
    }
  }

  return (
    <div className="container mx-auto p-4">
      <div className="mb-8">
        <h1 className="text-3xl font-bold mb-2">Upcoming Matches</h1>
        <p className="text-muted-foreground">
          Make your predictions for upcoming matches
        </p>
      </div>

      {matches.length > 0 ? (
        <div className="grid gap-6">
          {matches.map((match) => (
            <Card key={match.id} className="p-6">
              <div className="space-y-4">
                <div className="flex flex-col gap-4">
                  <div className="flex justify-between items-center">
                    <div className="flex items-center gap-2">
                      <div className="text-sm font-medium text-muted-foreground">
                        Round {match.round}
                      </div>
                      <div className="text-sm font-medium text-muted-foreground">
                        • BO{match.best_of}
                      </div>
                    </div>
                    <time className="text-sm text-muted-foreground">
                      {new Date(match.start_time).toLocaleString()}
                    </time>
                  </div>

                  <div className="flex justify-between items-center">
                    <h3 className="text-lg font-semibold flex items-center gap-3">
                      {match.team1_logo ? (
                        <Image
                          src={match.team1_logo}
                          alt={match.team1}
                          width={32}
                          height={32}
                          className="rounded-full"
                        />
                      ) : (
                        <div className="w-8 h-8 bg-muted rounded-full" />
                      )}
                      {match.team1}
                    </h3>
                    <span className="text-muted-foreground">vs</span>
                    <h3 className="text-lg font-semibold flex items-center gap-3">
                      {match.team2}
                      {match.team2_logo ? (
                        <Image
                          src={match.team2_logo}
                          alt={match.team2}
                          width={32}
                          height={32}
                          className="rounded-full"
                        />
                      ) : (
                        <div className="w-8 h-8 bg-muted rounded-full" />
                      )}
                    </h3>
                  </div>
                </div>

                <Separator />

                {errors[match.id] && (
                  <div className="p-3 rounded-md bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-400">
                    {errors[match.id]}
                  </div>
                )}

                <RadioGroup
                  name={`winner-${match.id}`}
                  className="gap-4"
                  onValueChange={(value) => handleSubmit(match.id, value)}
                  disabled={submitting[match.id]}
                >
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value={match.team1} id={`${match.id}-team1`} />
                    <Label htmlFor={`${match.id}-team1`}>{match.team1}</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value={match.team2} id={`${match.id}-team2`} />
                    <Label htmlFor={`${match.id}-team2`}>{match.team2}</Label>
                  </div>
                </RadioGroup>

                {submitting[match.id] && (
                  <div className="text-sm text-muted-foreground">
                    Submitting prediction...
                  </div>
                )}
              </div>
            </Card>
          ))}
        </div>
      ) : (
        <div className="text-center py-12">
          <div className="rounded-lg border border-dashed p-8">
            <h3 className="text-lg font-semibold mb-2">No Upcoming Matches</h3>
            <p className="text-muted-foreground">
              Check back later for new matches to predict
            </p>
          </div>
        </div>
      )}
    </div>
  )
}

================
File: src/app/matches/page.tsx
================
// src/app/matches/page.tsx
import { cookies } from 'next/headers'
import { createServerClient } from '@/utils/supabase'
import { redirect } from 'next/navigation'
import MatchList from './MatchList'
import { Match, GoodGameMatch } from './types'

const DIVISION_ID = '12517' // CS:GO Division
const API_BASE_URL = 'https://www.goodgameligaen.no/api'

async function fetchGoodGameMatches(): Promise<GoodGameMatch[]> {
  try {
    const params = new URLSearchParams({
      division: '12517',
      game: 'csgo',
      limit: '100',
      offset: '0',
      order_by: 'round_number',
      order_dir: 'asc',
      season: '13162',
      status: 'unfinished'
    })

    const url = `${API_BASE_URL}/matches?${params.toString()}`
    console.log('Fetching matches from:', url)

    const response = await fetch(url, {
      next: { revalidate: 300 }, // Cache for 5 minutes
      headers: {
        'Authorization': `Bearer ${process.env.GOOD_GAME_LIGAEN_TOKEN}`
      }
    })

    if (!response.ok) {
      throw new Error('Failed to fetch matches')
    }

    const data = await response.json()
    return data
  } catch (error) {
    console.error('Error fetching from Good Game Ligaen:', error)
    return []
  }
}

async function getMatches(): Promise<Match[]> {
  const cookieStore = cookies()
  const supabase = createServerClient(cookieStore)
  const now = new Date().toISOString()

  try {
    // 1. Fetch matches from Good Game Ligaen
    const ggMatches = await fetchGoodGameMatches()

    // 2. Transform the data to our format
    const transformedMatches = await Promise.all(
      ggMatches
        .filter(match => !match.finished_at && match.home_signup?.team && match.away_signup?.team)
        .map(async match => {
          // Get the existing match ID if it exists
          const { data: existingMatch } = await supabase
            .from('matches')
            .select('id')
            .eq('gg_ligaen_api_id', match.id.toString())
            .single()

          return {
            id: existingMatch?.id || crypto.randomUUID(),
            gg_ligaen_api_id: match.id.toString(),
            team1: match.home_signup.team.name,
            team2: match.away_signup.team.name,
            team1_id: match.home_signup.team.id.toString(),
            team2_id: match.away_signup.team.id.toString(),
            team1_logo: match.home_signup.team.logo?.url,
            team2_logo: match.away_signup.team.logo?.url,
            start_time: match.start_time,
            division_id: DIVISION_ID,
            is_finished: !!match.finished_at,
            best_of: match.best_of || 3,
            round: match.round_identifier_text
          }
        })
    )

    // 3. Store the matches in our database for reference
    const { error } = await supabase
      .from('matches')
      .upsert(
        transformedMatches.map(match => ({
          ...match,
          synced_at: new Date().toISOString()
        })),
        { 
          onConflict: 'gg_ligaen_api_id',
          ignoreDuplicates: false
        }
      )

    if (error) {
      console.error('Error storing matches:', error)
    }

    return transformedMatches
  } catch (error) {
    console.error('Error in getMatches:', error)
    
    // Fallback to database if API fails
    const { data: matches, error: dbError } = await supabase
      .from('matches')
      .select('*')
      .gt('start_time', now)
      .order('start_time', { ascending: true })
      .limit(10)

    if (dbError) {
      console.error('Error fetching from database:', dbError)
      return []
    }

    return matches || []
  }
}

export default async function MatchesPage() {
  const cookieStore = cookies()
  const supabase = createServerClient(cookieStore)

  // Check authentication
  const { data: { user } } = await supabase.auth.getUser()
  if (!user) {
    redirect('/login')
  }

  const matches = await getMatches()

  return <MatchList matches={matches} userId={user.id} />
}

================
File: src/app/matches/types.ts
================
export interface GoodGameTeam {
  id: number
  name: string
  common_name: string | null
  url: string
  logo?: {
    id: number
    ratio: number
    width: number
    height: number
    credits: string | null
    mimetype: string
    url: string
    relative_url: string
    aspect_string: string | null
  }
}

export interface GoodGameSignup {
  id: number
  name: string
  team: GoodGameTeam
}

export interface GoodGameMatch {
  id: number
  url: string
  start_time: string
  finished_at: string | null
  home_score: number | null
  away_score: number | null
  walkover: boolean
  postponed: boolean
  cancelled: boolean
  round_number: number
  round_identifier: string
  round_identifier_text: string
  winning_side: string | null
  bracket: string
  home_signup: GoodGameSignup
  away_signup: GoodGameSignup
  best_of?: number
}

export interface Match {
  id: string
  team1: string
  team2: string
  team1_id: string
  team2_id: string
  team1_logo?: string
  team2_logo?: string
  start_time: string
  division_id: string
  is_finished: boolean
  best_of: number
  round: string
}

================
File: src/app/opengraph-image.tsx
================
import { ImageResponse } from 'next/server'
import { cookies } from 'next/headers'
import { createServerClient } from '@/utils/supabase'

export const runtime = 'edge'

export const alt = 'Good Game Pickems'
export const size = {
  width: 1200,
  height: 630,
}

export const contentType = 'image/png'

export default async function Image({ 
  params,
  searchParams,
}: { 
  params: { id: string }
  searchParams: { [key: string]: string | string[] | undefined }
}) {
  try {
    // Get user data if user param is present
    const userId = searchParams.user as string
    let userData = null

    if (userId) {
      const cookieStore = cookies()
      const supabase = createServerClient(cookieStore)
      
      const { data: picks } = await supabase
        .from('picks')
        .select('is_correct')
        .eq('user_id', userId)
      
      if (picks) {
        const totalPicks = picks.length
        const correctPicks = picks.filter(pick => pick.is_correct).length
        const accuracy = ((correctPicks / totalPicks) * 100).toFixed(1)
        
        userData = {
          totalPicks,
          correctPicks,
          accuracy
        }
      }
    }

    return new ImageResponse(
      (
        <div
          style={{
            background: 'linear-gradient(to bottom right, #1a1b1e, #2d2e32)',
            width: '100%',
            height: '100%',
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            justifyContent: 'center',
            fontFamily: 'sans-serif',
            color: 'white',
            padding: '40px',
          }}
        >
          <div
            style={{
              fontSize: '48px',
              fontWeight: 'bold',
              marginBottom: '20px',
            }}
          >
            Good Game Pickems
          </div>
          
          {userData ? (
            <div
              style={{
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'center',
                gap: '12px',
              }}
            >
              <div style={{ fontSize: '32px' }}>
                {userData.correctPicks} correct predictions
              </div>
              <div style={{ fontSize: '24px', opacity: 0.8 }}>
                out of {userData.totalPicks} picks ({userData.accuracy}% accuracy)
              </div>
            </div>
          ) : (
            <div style={{ fontSize: '32px', opacity: 0.8 }}>
              Make your predictions and compete with others!
            </div>
          )}
        </div>
      ),
      {
        ...size,
        fonts: [
          {
            name: 'sans-serif',
            data: await fetch(
              new URL('/fonts/inter-var.ttf', import.meta.url)
            ).then((res) => res.arrayBuffer()),
            style: 'normal',
          },
        ],
      }
    )
  } catch (e) {
    console.error('Error generating OG image:', e)
    return new Response('Failed to generate image', { status: 500 })
  }
}

================
File: src/app/page.tsx
================
import AuthButton from '@/components/AuthButton'
import ConnectSupabaseSteps from '@/components/ConnectSupabaseSteps'
import SignUpUserSteps from '@/components/SignUpUserSteps'
import Header from '@/components/Header'
import { cookies } from 'next/headers'
import { createServerClient } from '@/utils/supabase'
import ThemeToggle from '@/components/ThemeToggle'
import Link from 'next/link'
import { Trophy, Calendar, User2, TrendingUp, Activity, Users } from 'lucide-react'

export default async function Index() {
  const cookieStore = cookies()

  const canInitSupabaseClient = () => {
    try {
      createServerClient(cookieStore)
      return true
    } catch (e) {
      return false
    }
  }

  const isSupabaseConnected = canInitSupabaseClient()

  // Get some basic stats if connected
  let stats = {
    totalPredictions: 0,
    activeUsers: 0,
    upcomingMatches: 0
  }

  if (isSupabaseConnected) {
    const supabase = createServerClient(cookieStore)
    const now = new Date().toISOString()

    // Get stats in parallel
    const [picksCount, usersCount, matchesCount] = await Promise.all([
      supabase.from('picks').select('*', { count: 'exact', head: true }),
      supabase.from('users').select('*', { count: 'exact', head: true }),
      supabase.from('matches')
        .select('*', { count: 'exact', head: true })
        .gt('start_time', now)
    ])

    stats = {
      totalPredictions: picksCount.count || 0,
      activeUsers: usersCount.count || 0,
      upcomingMatches: matchesCount.count || 0
    }
  }

  return (
    <div className="min-h-screen flex flex-col bg-background text-foreground">
      {/* Navigation */}
      <nav className="sticky top-0 z-50 backdrop-blur-sm bg-background/80 flex h-16 w-full items-center justify-center border-b border-b-foreground/10">
        <div className="flex w-full max-w-7xl items-center justify-between px-4">
          <h1 className="text-2xl font-bold">Good Game Pickems</h1>
          <div className="flex items-center gap-4">
            {isSupabaseConnected && <AuthButton />}
            <ThemeToggle />
          </div>
        </div>
      </nav>

      {/* Hero Section */}
      <header className="w-full py-16 bg-gradient-to-r from-indigo-600 via-purple-600 to-pink-600 text-white">
        <div className="max-w-7xl mx-auto px-4">
          <div className="max-w-3xl">
            <h1 className="text-5xl font-bold mb-6">
              Predict. Compete. Win.
            </h1>
            <p className="text-xl mb-8">
              Join the ultimate Good Game Ligaen prediction challenge. Make your picks, 
              climb the leaderboard, and prove your esports knowledge.
            </p>
            {isSupabaseConnected ? (
              <Link 
                href="/matches" 
                className="inline-flex items-center px-6 py-3 rounded-lg bg-white text-indigo-600 font-semibold hover:bg-indigo-50 transition"
              >
                Start Predicting
              </Link>
            ) : (
              <ConnectSupabaseSteps />
            )}
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="flex-grow">
        <div className="max-w-7xl mx-auto px-4 py-12">
          {/* Stats Section */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-12">
            <div className="bg-card rounded-lg p-6 flex items-center gap-4">
              <div className="p-3 bg-primary/10 rounded-full">
                <Activity className="h-6 w-6 text-primary" />
              </div>
              <div>
                <p className="text-sm text-muted-foreground">Total Predictions</p>
                <p className="text-2xl font-bold">{stats.totalPredictions.toLocaleString()}</p>
              </div>
            </div>
            <div className="bg-card rounded-lg p-6 flex items-center gap-4">
              <div className="p-3 bg-primary/10 rounded-full">
                <Users className="h-6 w-6 text-primary" />
              </div>
              <div>
                <p className="text-sm text-muted-foreground">Active Users</p>
                <p className="text-2xl font-bold">{stats.activeUsers.toLocaleString()}</p>
              </div>
            </div>
            <div className="bg-card rounded-lg p-6 flex items-center gap-4">
              <div className="p-3 bg-primary/10 rounded-full">
                <Calendar className="h-6 w-6 text-primary" />
              </div>
              <div>
                <p className="text-sm text-muted-foreground">Upcoming Matches</p>
                <p className="text-2xl font-bold">{stats.upcomingMatches.toLocaleString()}</p>
              </div>
            </div>
          </div>

          {/* Feature Grid */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-12">
            <Link 
              href="/matches" 
              className="group relative bg-card rounded-lg p-6 hover:shadow-lg transition overflow-hidden"
            >
              <div className="absolute inset-0 bg-gradient-to-r from-blue-600/10 to-purple-600/10 opacity-0 group-hover:opacity-100 transition" />
              <Calendar className="h-8 w-8 mb-4 text-primary" />
              <h3 className="text-xl font-semibold mb-2">Upcoming Matches</h3>
              <p className="text-muted-foreground">
                Browse upcoming matches and make your predictions before they start.
              </p>
            </Link>

            <Link 
              href="/leaderboard" 
              className="group relative bg-card rounded-lg p-6 hover:shadow-lg transition overflow-hidden"
            >
              <div className="absolute inset-0 bg-gradient-to-r from-yellow-600/10 to-red-600/10 opacity-0 group-hover:opacity-100 transition" />
              <Trophy className="h-8 w-8 mb-4 text-primary" />
              <h3 className="text-xl font-semibold mb-2">Leaderboard</h3>
              <p className="text-muted-foreground">
                Compete with others and climb to the top of the rankings.
              </p>
            </Link>

            <Link 
              href="/profile" 
              className="group relative bg-card rounded-lg p-6 hover:shadow-lg transition overflow-hidden"
            >
              <div className="absolute inset-0 bg-gradient-to-r from-green-600/10 to-emerald-600/10 opacity-0 group-hover:opacity-100 transition" />
              <User2 className="h-8 w-8 mb-4 text-primary" />
              <h3 className="text-xl font-semibold mb-2">My Profile</h3>
              <p className="text-muted-foreground">
                Track your prediction history and view your performance stats.
              </p>
            </Link>
          </div>

          {/* How It Works */}
          <section className="mb-12">
            <h2 className="text-3xl font-bold mb-8 text-center">How It Works</h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
              <div className="text-center">
                <div className="w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center mx-auto mb-4">
                  <Calendar className="h-6 w-6 text-primary" />
                </div>
                <h3 className="font-semibold mb-2">1. Pick Your Matches</h3>
                <p className="text-muted-foreground">
                  Browse upcoming matches and make your predictions
                </p>
              </div>
              <div className="text-center">
                <div className="w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center mx-auto mb-4">
                  <TrendingUp className="h-6 w-6 text-primary" />
                </div>
                <h3 className="font-semibold mb-2">2. Earn Points</h3>
                <p className="text-muted-foreground">
                  Get points for each correct prediction
                </p>
              </div>
              <div className="text-center">
                <div className="w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center mx-auto mb-4">
                  <Trophy className="h-6 w-6 text-primary" />
                </div>
                <h3 className="font-semibold mb-2">3. Climb the Ranks</h3>
                <p className="text-muted-foreground">
                  Compete with others and reach the top
                </p>
              </div>
            </div>
          </section>
        </div>
      </main>

      {/* Footer */}
      <footer className="w-full border-t border-t-foreground/10 py-8">
        <div className="max-w-7xl mx-auto px-4 text-center">
          <p className="text-sm text-muted-foreground">
            Powered by{' '}
            <a
              href="https://supabase.com"
              target="_blank"
              rel="noreferrer"
              className="font-semibold hover:underline"
            >
              Supabase
            </a>
          </p>
        </div>
      </footer>
    </div>
  )
}

================
File: src/app/profile/page.tsx
================
import { cookies } from 'next/headers'
import { createServerClient } from '@/utils/supabase'
import { redirect } from 'next/navigation'
import { Card } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import Link from 'next/link'

interface Match {
  team1: string
  team2: string
  start_time: string
}

interface Pick {
  id: string
  user_id: string
  match_id: string
  predicted_winner: string
  is_correct: boolean | null
  created_at: string
  match: Match
}

interface ProfileStats {
  totalPicks: number
  correctPicks: number
  totalPoints: number
  recentPicks: Pick[]
}

async function getProfileData(userId: string): Promise<{ stats: ProfileStats }> {
  const cookieStore = cookies()
  const supabase = createServerClient(cookieStore)

  try {
    // Get all picks with match details
    const { data: picks, error: picksError } = await supabase
      .from('picks')
      .select(`
        *,
        match:match_id (
          team1,
          team2,
          start_time
        )
      `)
      .eq('user_id', userId)
      .order('created_at', { ascending: false })

    if (picksError) {
      console.error('Error fetching picks:', picksError)
      // Instead of throwing, return empty stats
      return {
        stats: {
          totalPicks: 0,
          correctPicks: 0,
          totalPoints: 0,
          recentPicks: []
        }
      }
    }

    // Calculate statistics
    const stats: ProfileStats = {
      totalPicks: picks?.length || 0,
      correctPicks: picks?.filter(pick => pick.is_correct).length || 0,
      totalPoints: (picks?.filter(pick => pick.is_correct).length || 0) * 10,
      recentPicks: (picks?.slice(0, 5) || []) as Pick[]
    }

    return { stats }
  } catch (error) {
    console.error('Error in getProfileData:', error)
    // Return empty stats instead of throwing
    return {
      stats: {
        totalPicks: 0,
        correctPicks: 0,
        totalPoints: 0,
        recentPicks: []
      }
    }
  }
}

export default async function ProfilePage() {
  const cookieStore = cookies()
  const supabase = createServerClient(cookieStore)

  const { data: { user } } = await supabase.auth.getUser()

  if (!user) {
    redirect('/login')
  }

  const { stats } = await getProfileData(user.id)

  return (
    <div className="container mx-auto p-4">
      <div className="mb-8">
        <h1 className="mb-2 text-3xl font-bold">Profile</h1>
        <p className="text-muted-foreground">{user.email}</p>
      </div>

      <div className="mb-8 grid gap-4 md:grid-cols-3">
        <Card className="p-6">
          <div className="text-sm text-muted-foreground">Total Points</div>
          <div className="mt-2 text-2xl font-bold">{stats.totalPoints}</div>
        </Card>
        <Card className="p-6">
          <div className="text-sm text-muted-foreground">Correct Picks</div>
          <div className="mt-2 text-2xl font-bold">{stats.correctPicks}</div>
        </Card>
        <Card className="p-6">
          <div className="text-sm text-muted-foreground">Total Picks</div>
          <div className="mt-2 text-2xl font-bold">{stats.totalPicks}</div>
        </Card>
      </div>

      <div className="mb-8">
        <h2 className="mb-4 text-xl font-semibold">Recent Predictions</h2>
        <div className="space-y-4">
          {stats.recentPicks.length > 0 ? (
            stats.recentPicks.map((pick) => (
              <Card key={pick.id} className="p-4">
                <div className="flex items-center justify-between">
                  <div>
                    <div className="font-medium">
                      {pick.match.team1} vs {pick.match.team2}
                    </div>
                    <div className="mt-1 text-sm text-muted-foreground">
                      Predicted: {pick.predicted_winner}
                    </div>
                  </div>
                  <div className={`rounded-full px-3 py-1 text-sm ${
                    pick.is_correct 
                      ? 'bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-400' 
                      : pick.is_correct === false 
                        ? 'bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-400'
                        : 'bg-gray-100 text-gray-700 dark:bg-gray-800 dark:text-gray-300'
                  }`}>
                    {pick.is_correct === null 
                      ? 'Pending' 
                      : pick.is_correct 
                        ? 'Correct' 
                        : 'Incorrect'}
                  </div>
                </div>
                <div className="mt-2 text-sm text-muted-foreground">
                  {new Date(pick.match.start_time).toLocaleString()}
                </div>
              </Card>
            ))
          ) : (
            <div className="rounded-lg border border-dashed p-8 text-center">
              <p className="text-muted-foreground mb-4">No predictions made yet</p>
              <Link href="/matches">
                <Button>
                  Make Your First Prediction
                </Button>
              </Link>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}

================
File: src/app/test-examples/counter.test.tsx
================
import { userEvent, render, screen } from '@/test/test-utils'
import Counter from './counter'

it('App Router: Works with Client Components (React State)', async () => {
  render(<Counter />)

  expect(screen.getByText('0')).toBeInTheDocument()

  await userEvent.click(screen.getByRole('button'))

  expect(screen.getByText('1')).toBeInTheDocument()
})

================
File: src/app/test-examples/counter.tsx
================
'use client'

import { useState } from 'react'

export default function Counter() {
  const [count, setCount] = useState(0)
  return (
    <>
      <h2>{count}</h2>
      <button type="button" onClick={() => setCount(count + 1)}>
        +
      </button>
    </>
  )
}

================
File: src/app/test-examples/page.test.tsx
================
import { render, screen } from '@/test/test-utils'
import Page from './page'

it('App Router: Works with Server Components', () => {
  render(<Page />)
  expect(screen.getByRole('heading')).toHaveTextContent('App Router')
})

================
File: src/app/test-examples/page.tsx
================
export const metadata = {
  title: 'App Router',
}

export default function Page() {
  return <h1>App Router</h1>
}

================
File: src/components/auth/auth-actions.ts
================
'use server'

import { cookies } from 'next/headers'
import { createServerClient } from '@/utils/supabase'
import { redirect } from 'next/navigation'

export async function signOut() {
  const cookieStore = cookies()
  const supabase = createServerClient(cookieStore)
  await supabase.auth.signOut()
  redirect('/login')
}

================
File: src/components/AuthButton.tsx
================
'use client'

import { useEffect, useState } from 'react'
import Link from 'next/link'
import { useRouter } from 'next/navigation'
import { Button } from '@/components/ui/button'
import { createBrowserClient } from '@/utils/supabase'
import { signOut } from './auth/auth-actions'

export default function AuthButton() {
  const [user, setUser] = useState<any>(null)
  const [loading, setLoading] = useState(true)
  const router = useRouter()
  const supabase = createBrowserClient()

  useEffect(() => {
    async function getUser() {
      try {
        const { data: { user } } = await supabase.auth.getUser()
        setUser(user)
      } catch (error) {
        console.error('Error getting user:', error)
      } finally {
        setLoading(false)
      }
    }

    getUser()

    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {
      setUser(session?.user)
      router.refresh()
    })

    return () => {
      subscription.unsubscribe()
    }
  }, [supabase, router])

  if (loading) {
    return <Button variant="ghost" disabled>Loading...</Button>
  }

  if (!user) {
    return (
      <Link href="/login">
        <Button variant="outline">Sign In</Button>
      </Link>
    )
  }

  return (
    <div className="flex items-center gap-4">
      <span className="text-sm text-muted-foreground hidden md:inline">
        {user.email}
      </span>
      <form action={signOut}>
        <Button variant="outline" type="submit">
          Sign Out
        </Button>
      </form>
    </div>
  )
}

================
File: src/components/Code.tsx
================
'use client'

import { useState } from 'react'

const CopyIcon = () => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="20"
    height="20"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    strokeWidth="2"
    strokeLinecap="round"
    strokeLinejoin="round"
  >
    <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
    <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
  </svg>
)

const CheckIcon = () => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="20"
    height="20"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    strokeWidth="2"
    strokeLinecap="round"
    strokeLinejoin="round"
  >
    <polyline points="20 6 9 17 4 12"></polyline>
  </svg>
)

export default function Code({ code }: { code: string }) {
  const [icon, setIcon] = useState(CopyIcon)

  const copy = async () => {
    await navigator?.clipboard?.writeText(code)
    setIcon(CheckIcon)
    setTimeout(() => setIcon(CopyIcon), 2000)
  }

  return (
    <pre className="relative my-8 rounded-md bg-foreground/5 p-8">
      <button
        onClick={copy}
        className="absolute right-4 top-4  rounded-md bg-foreground/5 p-2 hover:bg-foreground/10"
      >
        {icon}
      </button>
      <code>{code}</code>
    </pre>
  )
}

================
File: src/components/ConnectSupabaseSteps.tsx
================
import Step from './Step'

export default function ConnectSupabaseSteps() {
  return (
    <ol className="flex flex-col gap-6">
      <Step title="Create Supabase project">
        <p>
          Head over to{' '}
          <a
            href="https://app.supabase.com/project/_/settings/api"
            target="_blank"
            className="font-bold text-foreground/80 hover:underline"
            rel="noreferrer"
          >
            database.new
          </a>{' '}
          and create a new Supabase project.
        </p>
      </Step>

      <Step title="Declare environment variables">
        <p>
          Rename the{' '}
          <span className="rounded-md bg-foreground/20 px-2 py-1 text-foreground/80">
            .env.example
          </span>{' '}
          file in your Next.js app to{' '}
          <span className="rounded-md bg-foreground/20 px-2 py-1 text-foreground/80">
            .env.local
          </span>{' '}
          and populate with values from{' '}
          <a
            href="https://app.supabase.com/project/_/settings/api"
            target="_blank"
            className="font-bold text-foreground/80 hover:underline"
            rel="noreferrer"
          >
            your Supabase project&apos;s API Settings
          </a>
          .
        </p>
      </Step>

      <Step title="Restart your Next.js development server">
        <p>
          You may need to quit your Next.js development server and run{' '}
          <span className="rounded-md bg-foreground/20 px-2 py-1 text-foreground/80">
            npm run dev
          </span>{' '}
          again to load the new environment variables.
        </p>
      </Step>

      <Step title="Refresh the page">
        <p>
          You may need to refresh the page for Next.js to load the new
          environment variables.
        </p>
      </Step>
    </ol>
  )
}

================
File: src/components/DarkModeToggle.tsx
================
// src/components/DarkModeToggle.tsx
'use client'

import React from 'react'
import { useTheme } from 'next-themes'

const DarkModeToggle = () => {
  const { theme, setTheme } = useTheme()

  const toggleTheme = () => {
    setTheme(theme === 'dark' ? 'light' : 'dark')
  }

  return (
    <button
      onClick={toggleTheme}
      className="p-2 bg-gray-200 dark:bg-gray-700 rounded focus:outline-none"
    >
      {theme === 'dark' ? 'Light Mode' : 'Dark Mode'}
    </button>
  )
}

export default DarkModeToggle

================
File: src/components/Header.tsx
================
import NextLogo from './NextLogo'
import SupabaseLogo from './SupabaseLogo'

export default function Header() {
  return (
    <div className="flex flex-col items-center gap-16">
      <div className="flex items-center justify-center gap-8">
        <a
          href="https://supabase.com/?utm_source=create-next-app&utm_medium=template&utm_term=nextjs"
          target="_blank"
          rel="noreferrer"
        >
          <SupabaseLogo />
        </a>
        <span className="h-6 rotate-45 border-l" />
        <a href="https://nextjs.org/" target="_blank" rel="noreferrer">
          <NextLogo />
        </a>
      </div>
      <h1 className="sr-only">Supabase and Next.js Starter Template</h1>
      <p className="mx-auto max-w-xl text-center text-3xl !leading-tight lg:text-4xl">
        The fastest way to build apps with{' '}
        <a
          href="https://supabase.com/?utm_source=create-next-app&utm_medium=template&utm_term=nextjs"
          target="_blank"
          className="font-bold hover:underline"
          rel="noreferrer"
        >
          Supabase
        </a>{' '}
        and{' '}
        <a
          href="https://nextjs.org/"
          target="_blank"
          className="font-bold hover:underline"
          rel="noreferrer"
        >
          Next.js
        </a>
      </p>
      <div className="my-8 w-full bg-gradient-to-r from-transparent via-foreground/10 to-transparent p-[1px]" />
    </div>
  )
}

================
File: src/components/Navigation.tsx
================
'use client'

import Link from 'next/link'
import { usePathname } from 'next/navigation'
import { Trophy, Calendar, User2 } from 'lucide-react'
import AuthButton from './AuthButton'
import ThemeToggle from './ThemeToggle'
import { cn } from '@/utils/tailwind'

const navItems = [
  {
    href: '/matches',
    label: 'Matches',
    icon: Calendar
  },
  {
    href: '/leaderboard',
    label: 'Leaderboard',
    icon: Trophy
  },
  {
    href: '/profile',
    label: 'Profile',
    icon: User2
  }
]

export default function Navigation() {
  const pathname = usePathname()

  return (
    <nav className="sticky top-0 z-50 backdrop-blur-sm bg-background/80 w-full border-b border-b-foreground/10">
      <div className="container mx-auto">
        <div className="flex h-16 items-center justify-between px-4">
          <div className="flex items-center gap-8">
            <Link href="/" className="text-2xl font-bold">
              Good Game Pickems
            </Link>
            <div className="hidden md:flex items-center gap-1">
              {navItems.map(({ href, label, icon: Icon }) => (
                <Link
                  key={href}
                  href={href}
                  className={cn(
                    'px-4 py-2 rounded-md text-sm font-medium transition-colors',
                    pathname === href
                      ? 'bg-primary text-primary-foreground'
                      : 'hover:bg-accent hover:text-accent-foreground'
                  )}
                >
                  <span className="flex items-center gap-2">
                    <Icon className="h-4 w-4" />
                    {label}
                  </span>
                </Link>
              ))}
            </div>
          </div>
          <div className="flex items-center gap-4">
            <AuthButton />
            <ThemeToggle />
          </div>
        </div>
        {/* Mobile Navigation */}
        <div className="md:hidden flex items-center justify-around pb-2">
          {navItems.map(({ href, label, icon: Icon }) => (
            <Link
              key={href}
              href={href}
              className={cn(
                'px-3 py-2 rounded-md text-sm font-medium transition-colors flex flex-col items-center gap-1',
                pathname === href
                  ? 'bg-primary text-primary-foreground'
                  : 'hover:bg-accent hover:text-accent-foreground'
              )}
            >
              <Icon className="h-4 w-4" />
              <span>{label}</span>
            </Link>
          ))}
        </div>
      </div>
    </nav>
  )
}

================
File: src/components/NextLogo.tsx
================
export default function NextLogo() {
  return (
    <svg
      aria-label="Next.js logotype"
      height="68"
      role="img"
      viewBox="0 0 394 79"
      width="100"
    >
      <path
        d="M261.919 0.0330722H330.547V12.7H303.323V79.339H289.71V12.7H261.919V0.0330722Z"
        fill="currentColor"
      />
      <path
        d="M149.052 0.0330722V12.7H94.0421V33.0772H138.281V45.7441H94.0421V66.6721H149.052V79.339H80.43V12.7H80.4243V0.0330722H149.052Z"
        fill="currentColor"
      />
      <path
        d="M183.32 0.0661486H165.506L229.312 79.3721H247.178L215.271 39.7464L247.127 0.126654L229.312 0.154184L206.352 28.6697L183.32 0.0661486Z"
        fill="currentColor"
      />
      <path
        d="M201.6 56.7148L192.679 45.6229L165.455 79.4326H183.32L201.6 56.7148Z"
        fill="currentColor"
      />
      <path
        clipRule="evenodd"
        d="M80.907 79.339L17.0151 0H0V79.3059H13.6121V16.9516L63.8067 79.339H80.907Z"
        fill="currentColor"
        fillRule="evenodd"
      />
      <path
        d="M333.607 78.8546C332.61 78.8546 331.762 78.5093 331.052 77.8186C330.342 77.1279 329.991 76.2917 330 75.3011C329.991 74.3377 330.342 73.5106 331.052 72.8199C331.762 72.1292 332.61 71.7838 333.607 71.7838C334.566 71.7838 335.405 72.1292 336.115 72.8199C336.835 73.5106 337.194 74.3377 337.204 75.3011C337.194 75.9554 337.028 76.5552 336.696 77.0914C336.355 77.6368 335.922 78.064 335.377 78.373C334.842 78.6911 334.252 78.8546 333.607 78.8546Z"
        fill="currentColor"
      />
      <path
        d="M356.84 45.4453H362.872V68.6846C362.863 70.8204 362.401 72.6472 361.498 74.1832C360.585 75.7191 359.321 76.8914 357.698 77.7185C356.084 78.5364 354.193 78.9546 352.044 78.9546C350.079 78.9546 348.318 78.6001 346.75 77.9094C345.182 77.2187 343.937 76.1826 343.024 74.8193C342.101 73.456 341.649 71.7565 341.649 69.7207H347.691C347.7 70.6114 347.903 71.3838 348.29 72.0291C348.677 72.6744 349.212 73.1651 349.895 73.5105C350.586 73.8559 351.38 74.0286 352.274 74.0286C353.243 74.0286 354.073 73.8286 354.746 73.4196C355.419 73.0197 355.936 72.4199 356.296 71.6201C356.646 70.8295 356.831 69.8479 356.84 68.6846V45.4453Z"
        fill="currentColor"
      />
      <path
        d="M387.691 54.5338C387.544 53.1251 386.898 52.0254 385.773 51.2438C384.638 50.4531 383.172 50.0623 381.373 50.0623C380.11 50.0623 379.022 50.2532 378.118 50.6258C377.214 51.0075 376.513 51.5164 376.033 52.1617C375.554 52.807 375.314 53.5432 375.295 54.3703C375.295 55.061 375.461 55.6608 375.784 56.1607C376.107 56.6696 376.54 57.0968 377.103 57.4422C377.656 57.7966 378.274 58.0874 378.948 58.3237C379.63 58.56 380.313 58.76 380.995 58.9236L384.14 59.6961C385.404 59.9869 386.631 60.3778 387.802 60.8776C388.973 61.3684 390.034 61.9955 390.965 62.7498C391.897 63.5042 392.635 64.413 393.179 65.4764C393.723 66.5397 394 67.7848 394 69.2208C394 71.1566 393.502 72.8562 392.496 74.3285C391.491 75.7917 390.043 76.9369 388.143 77.764C386.252 78.582 383.965 79 381.272 79C378.671 79 376.402 78.6002 374.493 77.8004C372.575 77.0097 371.08 75.8463 370.001 74.3194C368.922 72.7926 368.341 70.9294 368.258 68.7391H374.235C374.318 69.8842 374.687 70.8386 375.314 71.6111C375.95 72.3745 376.78 72.938 377.795 73.3197C378.819 73.6923 379.962 73.8832 381.226 73.8832C382.545 73.8832 383.707 73.6832 384.712 73.2924C385.708 72.9016 386.492 72.3564 387.055 71.6475C387.627 70.9476 387.913 70.1206 387.922 69.1754C387.913 68.312 387.654 67.5939 387.156 67.0304C386.649 66.467 385.948 65.9944 385.053 65.6127C384.15 65.231 383.098 64.8856 381.899 64.5857L378.081 63.6223C375.323 62.9225 373.137 61.8592 371.541 60.4323C369.937 59.0054 369.143 57.115 369.143 54.7429C369.143 52.798 369.678 51.0894 370.758 49.6261C371.827 48.1629 373.294 47.0268 375.148 46.2179C377.011 45.4 379.114 45 381.456 45C383.836 45 385.92 45.4 387.719 46.2179C389.517 47.0268 390.929 48.1538 391.952 49.5897C392.976 51.0257 393.511 52.6707 393.539 54.5338H387.691Z"
        fill="currentColor"
      />
    </svg>
  )
}

================
File: src/components/ReactQueryExample.test.tsx
================
import { render, screen, waitFor } from '@/test/test-utils'
import ReactQueryExample from './ReactQueryExample'
import { server } from '@/mocks/server'
import { HttpResponse, http } from 'msw'

describe('<ReactQueryExample/>', () => {
  it('Renders the loading screen', () => {
    render(<ReactQueryExample />)
    expect(screen.getByText('Loading...')).toBeInTheDocument()
  })

  it('Renders data from the handler', async () => {
    render(<ReactQueryExample />)

    await screen.findByText('Hello from the handler!')
  })

  it('Renders data from overridden handler', async () => {
    server.use(
      http.get('/api/message', () =>
        HttpResponse.json({ message: 'Hello from the overridden handler!' }),
      ),
    )

    render(<ReactQueryExample />)

    await screen.findByText('Hello from the overridden handler!')
  })
})

================
File: src/components/ReactQueryExample.tsx
================
'use client'

import useGetMessage from '@/hooks/useGetMessage'

const ReactQueryExample = () => {
  const { isLoading, data } = useGetMessage()

  if (isLoading) return <div>Loading...</div>

  return <div>{data?.message}</div>
}

export default ReactQueryExample

================
File: src/components/ShareButton.tsx
================
'use client'

import { useState } from 'react'
import { Button } from '@/components/ui/button'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'
import { Share2, Twitter, Facebook, Link as LinkIcon } from 'lucide-react'
import { createBrowserClient } from '@/utils/supabase'

interface ShareButtonProps {
  userId?: string
  mode: 'profile' | 'leaderboard'
  rank?: number
  stats?: {
    points: number
    correctPicks: number
    totalPicks: number
  }
}

export default function ShareButton({ userId, mode, rank, stats }: ShareButtonProps) {
  const [isLoading, setIsLoading] = useState(false)
  const [copied, setCopied] = useState(false)
  const supabase = createBrowserClient()

  const generateShareText = async () => {
    try {
      setIsLoading(true)
      let shareText = ''

      if (mode === 'leaderboard' && rank) {
        shareText = `🏆 I'm ranked #${rank} on Good Game Pickems! Come join and make your predictions!`
      } else if (mode === 'profile' && stats) {
        const accuracy = ((stats.correctPicks / stats.totalPicks) * 100).toFixed(1)
        shareText = `🎮 I've made ${stats.correctPicks} correct predictions out of ${stats.totalPicks} (${accuracy}% accuracy) on Good Game Pickems!`
      }

      // Get the base URL from environment variable or default
      const baseUrl = process.env.NEXT_PUBLIC_SITE_URL || window.location.origin
      const shareUrl = `${baseUrl}/${mode}${userId ? `?user=${userId}` : ''}`

      return { shareText, shareUrl }
    } finally {
      setIsLoading(false)
    }
  }

  const handleShare = async (platform: 'twitter' | 'facebook' | 'copy') => {
    try {
      const { shareText, shareUrl } = await generateShareText()

      switch (platform) {
        case 'twitter':
          window.open(
            `https://twitter.com/intent/tweet?text=${encodeURIComponent(shareText)}&url=${encodeURIComponent(shareUrl)}`,
            '_blank'
          )
          break
        case 'facebook':
          window.open(
            `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(shareUrl)}&quote=${encodeURIComponent(shareText)}`,
            '_blank'
          )
          break
        case 'copy':
          await navigator.clipboard.writeText(`${shareText}\n\n${shareUrl}`)
          setCopied(true)
          setTimeout(() => setCopied(false), 2000)
          break
      }
    } catch (error) {
      console.error('Error sharing:', error)
    }
  }

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button
          variant="outline"
          size="sm"
          className="gap-2"
          disabled={isLoading}
        >
          <Share2 className="h-4 w-4" />
          Share
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="w-56">
        <DropdownMenuItem
          className="gap-2 cursor-pointer"
          onClick={() => handleShare('twitter')}
        >
          <Twitter className="h-4 w-4" />
          Share on Twitter
        </DropdownMenuItem>
        <DropdownMenuItem
          className="gap-2 cursor-pointer"
          onClick={() => handleShare('facebook')}
        >
          <Facebook className="h-4 w-4" />
          Share on Facebook
        </DropdownMenuItem>
        <DropdownMenuItem
          className="gap-2 cursor-pointer"
          onClick={() => handleShare('copy')}
        >
          <LinkIcon className="h-4 w-4" />
          {copied ? 'Copied!' : 'Copy Link'}
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}

================
File: src/components/SignUpUserSteps.tsx
================
import Link from 'next/link'
import Step from './Step'
import Code from '@/components/Code'

const create = `
create table notes (
  id serial primary key,
  title text
);

insert into notes(title)
values
  ('Today I created a Supabase project.'),
  ('I added some data and queried it from Next.js.'),
  ('It was awesome!');
`.trim()

const server = `
import { createServerClient } from '@/utils/supabase'
import { cookies } from 'next/headers'

export default async function Page() {
  const cookieStore = cookies()
  const supabase = createServerClient(cookieStore)
  const { data: notes } = await supabase.from('notes').select()

  return <pre>{JSON.stringify(notes, null, 2)}</pre>
}
`.trim()

const client = `
'use client'

import { createBrowserClient } from '@/utils/supabase'
import { useEffect, useState } from 'react'

export default function Page() {
  const [notes, setNotes] = useState<any[] | null>(null)
  const supabase = createBrowserClient()

  useEffect(() => {
    const getData = async () => {
      const { data } = await supabase.from('notes').select()
      setNotes(data)
    }
    getData()
  }, [])

  return <pre>{JSON.stringify(notes, null, 2)}</pre>
}
`.trim()

export default function SignUpUserSteps() {
  return (
    <ol className="flex flex-col gap-6">
      <Step title="Sign up your first user">
        <p>
          Head over to the{' '}
          <Link
            href="/login"
            className="font-bold text-foreground/80 hover:underline"
          >
            Login
          </Link>{' '}
          page and sign up your first user. It&apos;s okay if this is just you
          for now. Your awesome idea will have plenty of users later!
        </p>
      </Step>

      <Step title="Create some tables and insert some data">
        <p>
          Head over to the{' '}
          <a
            href="https://supabase.com/dashboard/project/_/editor"
            className="font-bold text-foreground/80 hover:underline"
            target="_blank"
            rel="noreferrer"
          >
            Table Editor
          </a>{' '}
          for your Supabase project to create a table and insert some example
          data. If you&apos;re stuck for creativity, you can copy and paste the
          following into the{' '}
          <a
            href="https://supabase.com/dashboard/project/_/sql/new"
            className="font-bold text-foreground/80 hover:underline"
            target="_blank"
            rel="noreferrer"
          >
            SQL Editor
          </a>{' '}
          and click RUN!
        </p>
        <Code code={create} />
      </Step>

      <Step title="Query Supabase data from Next.js">
        <p>
          To create a Supabase client and query data from an Async Server
          Component, create a new page.tsx file at{' '}
          <span className="rounded-md bg-foreground/20 px-2 py-1 text-foreground/80">
            /app/notes/page.tsx
          </span>{' '}
          and add the following.
        </p>
        <Code code={server} />
        <p>Alternatively, you can use a Client Component.</p>
        <Code code={client} />
      </Step>

      <Step title="Build in a weekend and scale to millions!">
        <p>You&apos;re ready to launch your product to the world! 🚀</p>
      </Step>
    </ol>
  )
}

================
File: src/components/Step.tsx
================
export default function Step({
  title,
  children,
}: {
  title: string
  children: React.ReactNode
}) {
  return (
    <li className="mx-4">
      <input type="checkbox" id={title} className="peer mr-2" />
      <label
        htmlFor={title}
        className="text-lg font-semibold text-foreground/90 hover:cursor-pointer peer-checked:line-through"
      >
        {title}
      </label>
      <div className="mx-6 text-sm text-foreground/80 peer-checked:line-through">
        {children}
      </div>
    </li>
  )
}

================
File: src/components/SupabaseLogo.tsx
================
export default function SupabaseLogo() {
  return (
    <svg
      aria-label="Supabase logo"
      width="140"
      height="30"
      viewBox="0 0 115 23"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <g clipPath="url(#clip0_4671_51136)">
        <g clipPath="url(#clip1_4671_51136)">
          <path
            d="M13.4028 21.8652C12.8424 22.5629 11.7063 22.1806 11.6928 21.2898L11.4954 8.25948H20.3564C21.9614 8.25948 22.8565 10.0924 21.8585 11.3353L13.4028 21.8652Z"
            fill="url(#paint0_linear_4671_51136)"
          />
          <path
            d="M13.4028 21.8652C12.8424 22.5629 11.7063 22.1806 11.6928 21.2898L11.4954 8.25948H20.3564C21.9614 8.25948 22.8565 10.0924 21.8585 11.3353L13.4028 21.8652Z"
            fill="url(#paint1_linear_4671_51136)"
            fillOpacity="0.2"
          />
          <path
            d="M9.79895 0.89838C10.3593 0.200591 11.4954 0.582929 11.5089 1.47383L11.5955 14.5041H2.84528C1.24026 14.5041 0.345103 12.6711 1.34316 11.4283L9.79895 0.89838Z"
            fill="#3ECF8E"
          />
        </g>
        <path
          d="M30.5894 13.3913C30.7068 14.4766 31.7052 16.3371 34.6026 16.3371C37.1279 16.3371 38.3418 14.7479 38.3418 13.1976C38.3418 11.8022 37.3824 10.6588 35.4836 10.2712L34.1131 9.98049C33.5846 9.88359 33.2323 9.5929 33.2323 9.12777C33.2323 8.58512 33.7804 8.17818 34.4656 8.17818C35.5618 8.17818 35.9729 8.89521 36.0513 9.45725L38.2243 8.97275C38.1069 7.94561 37.1867 6.22083 34.446 6.22083C32.3709 6.22083 30.844 7.63555 30.844 9.34094C30.844 10.6781 31.6856 11.7828 33.5454 12.1898L34.8179 12.4805C35.5618 12.6355 35.8555 12.9844 35.8555 13.4107C35.8555 13.9146 35.4444 14.3603 34.583 14.3603C33.4476 14.3603 32.8797 13.6626 32.8212 12.9068L30.5894 13.3913Z"
          fill="currentColor"
        />
        <path
          d="M46.6623 16.0464H49.1486C49.1094 15.717 49.0506 15.0581 49.0506 14.3216V6.51154H46.4468V12.0542C46.4468 13.1588 45.7813 13.934 44.6263 13.934C43.4126 13.934 42.8643 13.0813 42.8643 12.0154V6.51154H40.2606V12.5387C40.2606 14.6123 41.5918 16.2984 43.9215 16.2984C44.9393 16.2984 46.0556 15.9108 46.5841 15.0193C46.5841 15.4069 46.6231 15.8526 46.6623 16.0464Z"
          fill="currentColor"
        />
        <path
          d="M54.433 19.7286V15.1162C54.9027 15.7558 55.8817 16.279 57.213 16.279C59.9341 16.279 61.7545 14.1472 61.7545 11.2596C61.7545 8.43021 60.1298 6.29842 57.3108 6.29842C55.8623 6.29842 54.7855 6.93792 54.3548 7.67439V6.51159H51.8295V19.7286H54.433ZM59.19 11.279C59.19 12.9845 58.133 13.9728 56.8017 13.9728C55.4708 13.9728 54.394 12.9651 54.394 11.279C54.394 9.59299 55.4708 8.6046 56.8017 8.6046C58.133 8.6046 59.19 9.59299 59.19 11.279Z"
          fill="currentColor"
        />
        <path
          d="M63.229 13.4495C63.229 14.9417 64.4818 16.3177 66.5375 16.3177C67.9662 16.3177 68.8865 15.6588 69.3758 14.9029C69.3758 15.2712 69.4149 15.7944 69.4737 16.0464H71.862C71.8033 15.7169 71.7449 15.0386 71.7449 14.5348V9.84482C71.7449 7.92622 70.6093 6.22083 67.5555 6.22083C64.9713 6.22083 63.5811 7.86807 63.4248 9.36033L65.7347 9.84482C65.8131 9.0115 66.4395 8.29445 67.5747 8.29445C68.6713 8.29445 69.1998 8.85646 69.1998 9.53475C69.1998 9.86421 69.0238 10.1355 68.4755 10.2131L66.1068 10.5619C64.5015 10.7945 63.229 11.744 63.229 13.4495ZM67.0854 14.3991C66.2438 14.3991 65.8325 13.8565 65.8325 13.2945C65.8325 12.558 66.361 12.1898 67.0268 12.0929L69.1998 11.7634V12.1898C69.1998 13.8759 68.1818 14.3991 67.0854 14.3991Z"
          fill="currentColor"
        />
        <path
          d="M76.895 16.0465V14.8837C77.4038 15.6976 78.4217 16.279 79.7531 16.279C82.4941 16.279 84.2951 14.1278 84.2951 11.2403C84.2951 8.4108 82.6701 6.25965 79.851 6.25965C78.4217 6.25965 77.3648 6.8798 76.934 7.55806V2.01546H74.3696V16.0465H76.895ZM81.6911 11.2596C81.6911 13.0038 80.6341 13.9728 79.3028 13.9728C77.9912 13.9728 76.895 12.9845 76.895 11.2596C76.895 9.51543 77.9912 8.56584 79.3028 8.56584C80.6341 8.56584 81.6911 9.51543 81.6911 11.2596Z"
          fill="currentColor"
        />
        <path
          d="M85.7692 13.4495C85.7692 14.9417 87.022 16.3177 89.0776 16.3177C90.5065 16.3177 91.4269 15.6588 91.916 14.9029C91.916 15.2712 91.9554 15.7944 92.014 16.0464H94.4023C94.3439 15.7169 94.2851 15.0386 94.2851 14.5348V9.84482C94.2851 7.92622 93.1495 6.22083 90.0955 6.22083C87.5115 6.22083 86.1216 7.86807 85.965 9.36033L88.2747 9.84482C88.3533 9.0115 88.9798 8.29445 90.1149 8.29445C91.2115 8.29445 91.74 8.85646 91.74 9.53475C91.74 9.86421 91.5638 10.1355 91.0156 10.2131L88.647 10.5619C87.0418 10.7945 85.7692 11.744 85.7692 13.4495ZM89.6258 14.3991C88.784 14.3991 88.3727 13.8565 88.3727 13.2945C88.3727 12.558 88.9012 12.1898 89.5671 12.0929L91.74 11.7634V12.1898C91.74 13.8759 90.722 14.3991 89.6258 14.3991Z"
          fill="currentColor"
        />
        <path
          d="M96.087 13.3913C96.2042 14.4766 97.2028 16.3371 100.1 16.3371C102.626 16.3371 103.839 14.7479 103.839 13.1976C103.839 11.8022 102.88 10.6588 100.981 10.2712L99.6105 9.98049C99.082 9.88359 98.7299 9.5929 98.7299 9.12777C98.7299 8.58512 99.2778 8.17818 99.963 8.17818C101.06 8.17818 101.471 8.89521 101.549 9.45725L103.722 8.97275C103.604 7.94561 102.684 6.22083 99.9436 6.22083C97.8683 6.22083 96.3416 7.63555 96.3416 9.34094C96.3416 10.6781 97.183 11.7828 99.043 12.1898L100.316 12.4805C101.06 12.6355 101.353 12.9844 101.353 13.4107C101.353 13.9146 100.942 14.3603 100.081 14.3603C98.9451 14.3603 98.3776 13.6626 98.3188 12.9068L96.087 13.3913Z"
          fill="currentColor"
        />
        <path
          d="M107.794 10.1937C107.852 9.32158 108.596 8.31381 109.947 8.31381C111.435 8.31381 112.062 9.24406 112.101 10.1937H107.794ZM112.355 12.6743C112.042 13.527 111.376 14.1278 110.163 14.1278C108.87 14.1278 107.794 13.2169 107.735 11.9573H114.626C114.626 11.9184 114.665 11.5309 114.665 11.1626C114.665 8.10064 112.884 6.22083 109.908 6.22083C107.441 6.22083 105.17 8.19753 105.17 11.2402C105.17 14.4572 107.5 16.3371 110.143 16.3371C112.512 16.3371 114.039 14.9611 114.528 13.3138L112.355 12.6743Z"
          fill="currentColor"
        />
      </g>
      <defs>
        <linearGradient
          id="paint0_linear_4671_51136"
          x1="11.4954"
          y1="11.1486"
          x2="19.3439"
          y2="14.4777"
          gradientUnits="userSpaceOnUse"
        >
          <stop stopColor="#249361" />
          <stop offset="1" stopColor="#3ECF8E" />
        </linearGradient>
        <linearGradient
          id="paint1_linear_4671_51136"
          x1="8.00382"
          y1="6.42177"
          x2="11.5325"
          y2="13.1398"
          gradientUnits="userSpaceOnUse"
        >
          <stop />
          <stop offset="1" stopOpacity="0" />
        </linearGradient>
        <clipPath id="clip0_4671_51136">
          <rect
            width="113.85"
            height="21.8943"
            fill="currentColor"
            transform="translate(0.922119 0.456161)"
          />
        </clipPath>
        <clipPath id="clip1_4671_51136">
          <rect
            width="21.3592"
            height="21.8943"
            fill="currentColor"
            transform="translate(0.919006 0.497101)"
          />
        </clipPath>
      </defs>
    </svg>
  )
}

================
File: src/components/ThemeToggle.tsx
================
'use client'

import { MoonIcon, SunIcon } from '@radix-ui/react-icons'
import { useTheme } from 'next-themes'
import { Button } from '@/components/ui/button'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'

type ThemeToggleProps = {
  side?: 'left' | 'top' | 'right' | 'bottom'
}

const ThemeToggle = ({ side }: ThemeToggleProps) => {
  const { setTheme } = useTheme()

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" size="icon">
          <SunIcon className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
          <MoonIcon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
          <span className="sr-only">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="start" side={side}>
        <DropdownMenuItem onClick={() => setTheme('light')}>
          Light
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme('dark')}>
          Dark
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme('system')}>
          System
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}

export default ThemeToggle

================
File: src/components/Toaster.tsx
================
'use client'

import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from '@/components/ui/toast'
import { useToast } from '@/components/ui/use-toast'

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}

================
File: src/components/ui/button.tsx
================
import * as React from 'react'
import { cn } from '@/utils/tailwind'

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link'
  size?: 'default' | 'sm' | 'lg' | 'icon'
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant = 'default', size = 'default', ...props }, ref) => {
    const baseStyles = 'inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background'
    
    const variants = {
      default: 'bg-primary text-primary-foreground hover:bg-primary/90',
      destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',
      outline: 'border border-input bg-background hover:bg-accent hover:text-accent-foreground',
      secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',
      ghost: 'hover:bg-accent hover:text-accent-foreground',
      link: 'text-primary underline-offset-4 hover:underline'
    }
    
    const sizes = {
      default: 'h-10 px-4 py-2',
      sm: 'h-9 rounded-md px-3',
      lg: 'h-11 rounded-md px-8',
      icon: 'h-10 w-10'
    }

    return (
      <button
        className={cn(
          baseStyles,
          variants[variant],
          sizes[size],
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = 'Button'

export { Button }

================
File: src/components/ui/card.tsx
================
import * as React from 'react'
import { cn } from '@/utils/tailwind'

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      'rounded-lg border bg-card text-card-foreground shadow-sm',
      className
    )}
    {...props}
  />
))
Card.displayName = 'Card'

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn('flex flex-col space-y-1.5 p-6', className)}
    {...props}
  />
))
CardHeader.displayName = 'CardHeader'

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      'text-2xl font-semibold leading-none tracking-tight',
      className
    )}
    {...props}
  />
))
CardTitle.displayName = 'CardTitle'

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
))
CardDescription.displayName = 'CardDescription'

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn('p-6 pt-0', className)} {...props} />
))
CardContent.displayName = 'CardContent'

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn('flex items-center p-6 pt-0', className)}
    {...props}
  />
))
CardFooter.displayName = 'CardFooter'

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: src/components/ui/dropdown-menu.tsx
================
'use client'

import * as React from 'react'
import * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu'
import { CheckIcon, ChevronRightIcon, CircleIcon } from '@radix-ui/react-icons'

import { cn } from '@/utils/tailwind'

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent',
      inset && 'pl-8',
      className,
    )}
    {...props}
  >
    {children}
    <ChevronRightIcon className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
      className,
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
        className,
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      inset && 'pl-8',
      className,
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className,
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <CheckIcon className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className,
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <CircleIcon className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      'px-2 py-1.5 text-sm font-semibold',
      inset && 'pl-8',
      className,
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn('-mx-1 my-1 h-px bg-muted', className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn('ml-auto text-xs tracking-widest opacity-60', className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = 'DropdownMenuShortcut'

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

================
File: src/components/ui/label.tsx
================
'use client'

import * as React from 'react'
import * as LabelPrimitive from '@radix-ui/react-label'
import { cn } from '@/utils/tailwind'

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(
      'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70',
      className
    )}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

================
File: src/components/ui/radio-group.tsx
================
'use client'

import * as React from 'react'
import * as RadioGroupPrimitive from '@radix-ui/react-radio-group'
import { Circle } from 'lucide-react'

import { cn } from '@/utils/tailwind'

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn('grid gap-2', className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        'aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }

================
File: src/components/ui/separator.tsx
================
'use client'

import * as React from 'react'
import * as SeparatorPrimitive from '@radix-ui/react-separator'
import { cn } from '@/utils/tailwind'

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(({ className, orientation = 'horizontal', decorative = true, ...props }, ref) => (
  <SeparatorPrimitive.Root
    ref={ref}
    decorative={decorative}
    orientation={orientation}
    className={cn(
      'shrink-0 bg-border',
      orientation === 'horizontal' ? 'h-[1px] w-full' : 'h-full w-[1px]',
      className
    )}
    {...props}
  />
))
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

================
File: src/components/ui/toast.tsx
================
import * as React from 'react'
import * as ToastPrimitives from '@radix-ui/react-toast'
import { cva, type VariantProps } from 'class-variance-authority'
import { X } from 'lucide-react'

import { cn } from '@/utils/tailwind'

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      'fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]',
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  'group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full',
  {
    variants: {
      variant: {
        default: 'border bg-background text-foreground',
        destructive:
          'destructive group border-destructive bg-destructive text-destructive-foreground',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      'inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive',
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      'absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600',
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn('text-sm font-semibold', className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn('text-sm opacity-90', className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}

================
File: src/components/ui/toaster.tsx
================
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from '@/components/ui/toast'
import { useToast } from '@/components/ui/use-toast'

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}

================
File: src/components/ui/use-toast.ts
================
'use client'

import * as React from 'react'
import type {
  ToastActionElement,
  ToastProps,
} from '@/components/ui/toast'

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: 'ADD_TOAST',
  UPDATE_TOAST: 'UPDATE_TOAST',
  DISMISS_TOAST: 'DISMISS_TOAST',
  REMOVE_TOAST: 'REMOVE_TOAST',
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_VALUE
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType['ADD_TOAST']
      toast: ToasterToast
    }
  | {
      type: ActionType['UPDATE_TOAST']
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType['DISMISS_TOAST']
      toastId?: ToasterToast['id']
    }
  | {
      type: ActionType['REMOVE_TOAST']
      toastId?: ToasterToast['id']
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: 'REMOVE_TOAST',
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case 'ADD_TOAST':
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case 'UPDATE_TOAST':
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case 'DISMISS_TOAST': {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case 'REMOVE_TOAST':
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, 'id'>

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: 'UPDATE_TOAST',
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: 'DISMISS_TOAST', toastId: id })

  dispatch({
    type: 'ADD_TOAST',
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: 'DISMISS_TOAST', toastId }),
  }
}

export { useToast, toast }

================
File: src/db/functions/update_user_total_points.sql
================
-- Function to update total points for all users
CREATE OR REPLACE FUNCTION update_user_total_points()
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  -- Update the total_points column in the users table
  UPDATE users
  SET total_points = (
    SELECT COALESCE(SUM(points_awarded), 0)
    FROM picks
    WHERE picks.user_id = users.id
    AND points_awarded IS NOT NULL
  );

  -- Update the rank column based on total points
  UPDATE users
  SET rank = ranks.rank
  FROM (
    SELECT 
      id,
      RANK() OVER (ORDER BY total_points DESC) as rank
    FROM users
  ) ranks
  WHERE users.id = ranks.id;
END;
$$;

================
File: src/db/migrations/leaderboard_function.sql
================
-- Create or replace the leaderboard function
CREATE OR REPLACE FUNCTION get_leaderboard(time_filter text)
RETURNS TABLE (
  user_id uuid,
  email text,
  correct_picks bigint,
  total_picks bigint
) 
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  RETURN QUERY EXECUTE format('
    SELECT 
      p.user_id,
      u.email,
      COUNT(*) FILTER (WHERE is_correct = true)::bigint as correct_picks,
      COUNT(*)::bigint as total_picks
    FROM picks p
    INNER JOIN users u ON u.id = p.user_id
    WHERE 1=1 %s
    GROUP BY p.user_id, u.email
    ORDER BY correct_picks DESC
  ', time_filter);
END;
$$;

================
File: src/db/migrations/matches.sql
================
-- Add unique constraint on gg_ligaen_api_id
ALTER TABLE matches
ADD COLUMN IF NOT EXISTS gg_ligaen_api_id TEXT;

-- Add unique constraint if it doesn't exist
DO $$ 
BEGIN
    IF NOT EXISTS (
        SELECT 1 
        FROM pg_constraint 
        WHERE conname = 'matches_gg_ligaen_api_id_key'
    ) THEN
        ALTER TABLE matches
        ADD CONSTRAINT matches_gg_ligaen_api_id_key UNIQUE (gg_ligaen_api_id);
    END IF;
END $$;

================
File: src/db/migrations/remove_is_synced.sql
================
-- Remove is_synced column if it exists
DO $$ 
BEGIN
    IF EXISTS (
        SELECT 1 
        FROM information_schema.columns 
        WHERE table_name = 'matches' 
        AND column_name = 'is_synced'
    ) THEN
        ALTER TABLE matches DROP COLUMN is_synced;
    END IF;
END $$;

================
File: src/db/schema.sql
================
-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Users Table (Extended from Supabase Auth)
CREATE TABLE users (
  id uuid PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  email text UNIQUE NOT NULL,
  username text,
  is_admin boolean DEFAULT false,
  total_points integer DEFAULT 0,
  rank integer,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now()
);

-- Matches Table
CREATE TABLE matches (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  gg_ligaen_api_id text NOT NULL,
  team1_id text NOT NULL,
  team2_id text NOT NULL,
  team1 text NOT NULL,
  team2 text NOT NULL,
  team1_logo text,
  team2_logo text,
  start_time timestamp with time zone NOT NULL,
  division_id text NOT NULL,
  is_finished boolean DEFAULT false,
  winner_id text,
  best_of integer NOT NULL,
  round text,
  points_processed boolean DEFAULT false,
  synced_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now()
);

-- Picks Table
CREATE TABLE picks (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid REFERENCES users(id) ON DELETE CASCADE,
  match_id uuid REFERENCES matches(id) ON DELETE CASCADE,
  predicted_winner text NOT NULL,
  points_awarded integer DEFAULT 0,
  is_correct boolean DEFAULT false,
  manual_adjustment_reason text,
  adjusted_by uuid REFERENCES users(id),
  adjusted_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  UNIQUE(user_id, match_id)
);

-- Sync Logs Table
CREATE TABLE sync_logs (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  synced_by uuid REFERENCES users(id),
  matches_synced integer,
  created_at timestamp with time zone DEFAULT now()
);

-- Enable Row Level Security
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE matches ENABLE ROW LEVEL SECURITY;
ALTER TABLE picks ENABLE ROW LEVEL SECURITY;
ALTER TABLE sync_logs ENABLE ROW LEVEL SECURITY;

-- RLS Policies for Users
CREATE POLICY "Users can view all users"
  ON users FOR SELECT
  TO authenticated
  USING (true);

CREATE POLICY "Only admins can update users"
  ON users FOR UPDATE
  TO authenticated
  USING (is_admin = true);

-- RLS Policies for Matches
CREATE POLICY "Anyone can view matches"
  ON matches FOR SELECT
  TO authenticated
  USING (true);

CREATE POLICY "Only admins can modify matches"
  ON matches FOR ALL
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM users
      WHERE users.id = auth.uid()
      AND users.is_admin = true
    )
  );

-- RLS Policies for Picks
CREATE POLICY "Users can view all picks"
  ON picks FOR SELECT
  TO authenticated
  USING (true);

CREATE POLICY "Users can insert their own picks"
  ON picks FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own picks"
  ON picks FOR UPDATE
  TO authenticated
  USING (auth.uid() = user_id);

CREATE POLICY "Only admins can update any pick"
  ON picks FOR UPDATE
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM users
      WHERE users.id = auth.uid()
      AND users.is_admin = true
    )
  );

-- RLS Policies for Sync Logs
CREATE POLICY "Anyone can view sync logs"
  ON sync_logs FOR SELECT
  TO authenticated
  USING (true);

CREATE POLICY "Only admins can insert sync logs"
  ON sync_logs FOR INSERT
  TO authenticated
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM users
      WHERE users.id = auth.uid()
      AND users.is_admin = true
    )
  );

-- Indexes
CREATE INDEX idx_matches_start_time ON matches(start_time);
CREATE INDEX idx_matches_division_id ON matches(division_id);
CREATE INDEX idx_picks_user_id ON picks(user_id);
CREATE INDEX idx_picks_match_id ON picks(match_id);
CREATE INDEX idx_picks_created_at ON picks(created_at);
CREATE INDEX idx_users_rank ON users(rank);
CREATE INDEX idx_users_total_points ON users(total_points);

-- Triggers for updated_at timestamps
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_users_updated_at
    BEFORE UPDATE ON users
    FOR EACH ROW
    EXECUTE PROCEDURE update_updated_at_column();

CREATE TRIGGER update_matches_updated_at
    BEFORE UPDATE ON matches
    FOR EACH ROW
    EXECUTE PROCEDURE update_updated_at_column();

CREATE TRIGGER update_picks_updated_at
    BEFORE UPDATE ON picks
    FOR EACH ROW
    EXECUTE PROCEDURE update_updated_at_column();

================
File: src/db/triggers.sql
================
-- Create a function to handle new user creation
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS trigger AS $$
BEGIN
  INSERT INTO public.users (id, email, created_at, updated_at)
  VALUES (
    NEW.id,
    NEW.email,
    NEW.created_at,
    NEW.updated_at
  );
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create a trigger to call this function when a new user signs up
CREATE OR REPLACE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

================
File: src/hooks/useGetMessage.ts
================
import { UseQueryResult, useQuery } from '@tanstack/react-query'
import axios from 'axios'

// Creating a reusable hook to get messages, need to use axios here since Next patches fetch
// and causes issues with msw
const useGetMessage = (): UseQueryResult<{ message: string }, Error> =>
  useQuery({
    queryKey: ['/api/message'],
    queryFn: async () => {
      const { data } = await axios.get('/api/message')

      return data
    },
  })

export default useGetMessage

================
File: src/middleware.ts
================
import { NextResponse, type NextRequest } from 'next/server'
import { createMiddlewareClient } from '@/utils/supabase'

export async function middleware(request: NextRequest) {
  try {
    // This `try/catch` block is only here for the interactive tutorial.
    // Feel free to remove once you have Supabase connected.
    const { supabase, response } = createMiddlewareClient(request)

    // Refresh session if expired - required for Server Components
    // https://supabase.com/docs/guides/auth/auth-helpers/nextjs#managing-session-with-middleware
    await supabase.auth.getSession()

    return response
  } catch (e) {
    // If you are here, a Supabase client could not be created!
    // This is likely because you have not set up environment variables.
    // Check out http://localhost:3000 for Next Steps.
    return NextResponse.next({
      request: { headers: request.headers },
    })
  }
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * Feel free to modify this pattern to include more paths.
     */
    '/((?!_next/static|_next/image|favicon.ico).*)',
  ],
}

================
File: src/mocks/browser.ts
================
import { setupWorker } from 'msw/browser'
import { handlers } from './handlers'

export const worker = setupWorker(...handlers)

================
File: src/mocks/handlers.ts
================
import { HttpResponse, http } from 'msw'

export const handlers = [
  // Intercept the "GET /message" request.
  http.get('/api/message', () =>
    HttpResponse.json({ message: 'Hello from the handler!' }),
  ),
]

================
File: src/mocks/index.ts
================
if (typeof window === 'undefined') {
  const { server } = require('./server')
  server.listen()
} else {
  const { worker } = require('./browser')
  worker.start()
}
export {}

================
File: src/mocks/server.ts
================
import { setupServer } from 'msw/node'
import { handlers } from './handlers'

export const server = setupServer(...handlers)

================
File: src/providers/ReactQueryProvider.tsx
================
'use client'

import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { useState } from 'react'

const ReactQueryProvider = ({ children }: { children: React.ReactNode }) => {
  const [queryClient] = useState(() => new QueryClient())

  return (
    <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
  )
}

export default ReactQueryProvider

================
File: src/providers/ThemeProvider.tsx
================
'use client'

import { ThemeProvider as NextThemesProvider } from 'next-themes'
import { type ThemeProviderProps } from 'next-themes/dist/types'

const ThemeProvider = ({ children, ...props }: ThemeProviderProps) => (
  <NextThemesProvider {...props}>{children}</NextThemesProvider>
)

export default ThemeProvider

================
File: src/test/test-utils.tsx
================
import { ReactElement } from 'react'
import { render, RenderOptions } from '@testing-library/react'
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'

const queryClient = new QueryClient({
  defaultOptions: { queries: { retry: false } },
})

const Wrapper = ({ children }: { children: ReactElement }) => (
  <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
)

// All the providers you need for tests can go here : Theme, Redux, etc.
const customRender = (
  ui: ReactElement,
  options?: Omit<RenderOptions, 'wrapper'>,
) => render(ui, { wrapper: Wrapper, ...options })

export * from '@testing-library/react'
export { default as userEvent } from '@testing-library/user-event'
export { customRender as render }

================
File: src/utils/goodgame.ts
================
import { GoodGameMatch, Match } from '@/app/matches/types'

const DIVISION_ID = '12517' // CS:GO Division
const SEASON_ID = '13162'   // Current Season
const API_BASE_URL = 'https://www.goodgameligaen.no/api'

export async function fetchGoodGameMatches(): Promise<GoodGameMatch[]> {
  try {
    const params = new URLSearchParams({
      division: '12517',
      game: 'csgo',
      limit: '100',
      offset: '0',
      order_by: 'round_number',
      order_dir: 'asc',
      season: '13162',
      status: 'unfinished'
    })

    const url = `${API_BASE_URL}/matches?${params.toString()}`
    console.log('Fetching matches from:', url)
    
    const response = await fetch(url, {
      next: { revalidate: 300 }, // Cache for 5 minutes
      headers: {
        'Authorization': `Bearer ${process.env.GOOD_GAME_LIGAEN_TOKEN}`
      }
    })

    if (!response.ok) {
      const errorText = await response.text()
      console.error('API Response:', {
        status: response.status,
        statusText: response.statusText,
        body: errorText
      })
      throw new Error(`Failed to fetch matches: ${response.statusText}. ${errorText}`)
    }

    const data = await response.json()
    
    // Log the first match to see its structure
    if (data.length > 0) {
      console.log('Sample match structure:', JSON.stringify(data[0], null, 2))
    }
    
    console.log('Fetched matches:', data.length)
    return data
  } catch (error) {
    console.error('Error fetching from Good Game Ligaen:', error)
    throw error
  }
}

export function transformGoodGameMatch(match: GoodGameMatch): Match {
  try {
    // Log the match being transformed
    console.log('Transforming match:', JSON.stringify(match, null, 2))

    // Check if we have the required properties
    if (!match.home_signup?.team || !match.away_signup?.team) {
      console.error('Missing team data in match:', match)
      throw new Error('Invalid match data: missing team information')
    }

    return {
      id: match.id.toString(),
      team1: match.home_signup.team.name,
      team2: match.away_signup.team.name,
      team1_id: match.home_signup.team.id.toString(),
      team2_id: match.away_signup.team.id.toString(),
      team1_logo: match.home_signup.team.logo?.url,
      team2_logo: match.away_signup.team.logo?.url,
      start_time: match.start_time,
      division_id: DIVISION_ID,
      is_finished: !!match.finished_at,
      best_of: match.best_of || 3, // Default to BO3 if not specified
      round: match.round_identifier_text
    }
  } catch (error) {
    console.error('Error transforming match:', error)
    throw error
  }
}

export async function syncMatches(supabase: any) {
  try {
    console.log('Starting match sync...')
    
    // 1. Fetch matches from Good Game Ligaen
    const ggMatches = await fetchGoodGameMatches()
    console.log(`Fetched ${ggMatches.length} matches from API`)
    
    if (ggMatches.length === 0) {
      console.log('No matches returned from API')
      return {
        success: true,
        synced_matches: 0,
        matches: []
      }
    }
    
    // 2. Transform matches to our format
    const transformedMatches = await Promise.all(
      ggMatches
        .filter(match => match && match.home_signup?.team && match.away_signup?.team)
        .map(async match => {
          // Get the existing match ID if it exists
          const { data: existingMatch } = await supabase
            .from('matches')
            .select('id')
            .eq('gg_ligaen_api_id', match.id.toString())
            .single()

          const matchData = transformGoodGameMatch(match)
          return {
            ...matchData,
            id: existingMatch?.id || crypto.randomUUID(),
            gg_ligaen_api_id: match.id.toString(),
            synced_at: new Date().toISOString()
          }
        })
    )

    console.log(`Transformed ${transformedMatches.length} matches`)

    if (transformedMatches.length === 0) {
      console.log('No valid matches to sync')
      return {
        success: true,
        synced_matches: 0,
        matches: []
      }
    }

    // 3. Upsert matches to our database
    const { data, error } = await supabase
      .from('matches')
      .upsert(transformedMatches, {
        onConflict: 'gg_ligaen_api_id',
        ignoreDuplicates: false
      })
      .select()

    if (error) {
      console.error('Error upserting matches:', error)
      throw error
    }

    console.log(`Successfully upserted ${data?.length || 0} matches`)

    // 4. Log the sync
    const { error: logError } = await supabase
      .from('sync_logs')
      .insert({
        matches_synced: transformedMatches.length
      })

    if (logError) {
      console.error('Error logging sync:', logError)
    }

    return {
      success: true,
      synced_matches: transformedMatches.length,
      matches: data || []
    }
  } catch (error) {
    console.error('Error syncing matches:', error)
    throw error
  }
}

================
File: src/utils/supabase.ts
================
import {
  createBrowserClient as browserClient,
  createServerClient as serverClient,
  type CookieOptions,
} from '@supabase/ssr'
import { cookies } from 'next/headers'
import { NextRequest, NextResponse } from 'next/server'

export const createBrowserClient = () =>
  browserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
  )

export const createServerClient = (cookieStore: ReturnType<typeof cookies>) =>
  serverClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) {
          return cookieStore.get(name)?.value
        },
        set(name: string, value: string, options: CookieOptions) {
          try {
            cookieStore.set({ name, value, ...options })
          } catch (error) {
            // The `set` method was called from a Server Component.
            // This can be ignored if you have middleware refreshing
            // user sessions.
          }
        },
        remove(name: string, options: CookieOptions) {
          try {
            cookieStore.set({ name, value: '', ...options })
          } catch (error) {
            // The `delete` method was called from a Server Component.
            // This can be ignored if you have middleware refreshing
            // user sessions.
          }
        },
      },
    },
  )

export const createMiddlewareClient = (request: NextRequest) => {
  // Create an unmodified response
  let response = NextResponse.next({ request: { headers: request.headers } })

  const supabase = serverClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) {
          return request.cookies.get(name)?.value
        },
        set(name: string, value: string, options: CookieOptions) {
          // If the cookie is updated, update the cookies for the request and response
          request.cookies.set({ name, value, ...options })
          response = NextResponse.next({
            request: { headers: request.headers },
          })
          response.cookies.set({ name, value, ...options })
        },
        remove(name: string, options: CookieOptions) {
          // If the cookie is removed, update the cookies for the request and response
          request.cookies.set({ name, value: '', ...options })
          response = NextResponse.next({
            request: { headers: request.headers },
          })
          response.cookies.set({ name, value: '', ...options })
        },
      },
    },
  )

  return { supabase, response }
}

================
File: src/utils/tailwind.ts
================
import { type ClassValue, clsx } from 'clsx'
import { twMerge } from 'tailwind-merge'

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ['class'],
  content: ['./src/**/*.{ts,tsx}'],
  prefix: '',
  theme: {
    container: {
      center: true,
      padding: '2rem',
      screens: { '2xl': '1400px' },
    },
    extend: {
      colors: {
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        primary: {
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))',
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))',
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))',
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))',
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))',
        },
        popover: {
          DEFAULT: 'hsl(var(--popover))',
          foreground: 'hsl(var(--popover-foreground))',
        },
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))',
        },
      },
      borderRadius: {
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)',
      },
      keyframes: {
        'accordion-down': {
          from: { height: '0' },
          to: { height: 'var(--radix-accordion-content-height)' },
        },
        'accordion-up': {
          from: { height: 'var(--radix-accordion-content-height)' },
          to: { height: '0' },
        },
      },
      animation: {
        'accordion-down': 'accordion-down 0.2s ease-out',
        'accordion-up': 'accordion-up 0.2s ease-out',
      },
    },
  },
  plugins: [require('tailwindcss-animate')],
}

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [{ "name": "next" }],
    "paths": { "@/*": ["./src/*"] },
    "types": ["@testing-library/jest-dom"]
  },
  "include": [
    "**/*.ts",
    "**/*.tsx",
    "**/*.test.ts",
    "**/*.test.tsx",
    "types.d.ts",
    "next-env.d.ts",
    ".next/types/**/*.ts"
  ],
  "exclude": ["node_modules", ".next", "out"]
}
